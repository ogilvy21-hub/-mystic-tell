// lunar-javascript ê¸€ë¡œë²Œ ë³´ì •
if (typeof window.Solar === "undefined" && typeof window.Lunar !== "undefined") {
  window.Solar = window.Lunar.Solar;
}
if (typeof window.LunarMonth === "undefined" && typeof window.Lunar !== "undefined") {
  window.LunarMonth = window.Lunar.LunarMonth;
}

const $=(s,r=document)=>r.querySelector(s);
const $$=(s,r=document)=>Array.from(r.querySelectorAll(s));
const LS_KEY="mystictell:recent";

// ë©”ë‰´ ì¸ë„¤ì¼/ì•„ì´ì½˜ ìˆ¨ê¸°ê¸° + ë ˆì´ì•„ì›ƒ ë³´ì •
(function injectPalmStyles(){
  if (document.getElementById('palm-style-tweak')) return;
  const css = `
    /* ê²°ê³¼ ì´ë¯¸ì§€ ë ˆì´ì•„ì›ƒ */
    .palm-photo-wrap{position:relative;width:100%;max-width:560px;margin:8px auto 18px;}
    .palm-photo{display:block;width:100%;height:auto;border-radius:16px;background:#fff;}
    .palm-overlay{position:absolute;inset:0;}

    /* ì†ê¸ˆ ë©”ë‰´ ì¹´ë“œì—ì„œ ì´ë¯¸ì§€/ìž„ì˜ SVG/ë°°ê²½ ì¸ë„¤ì¼ ì œê±° */
    .palm-type-card img,
    .palm-type-card svg,
    .palm-type-card .thumb,
    .palm-type-card .icon{ display:none !important; }

    /* í…ìŠ¤íŠ¸+ì´ëª¨ì§€ ë ˆì´ì•„ì›ƒ ë³´ì • */
    .palm-type-card .title,
    .palm-type-card .card-title{ margin-top:4px; }
    .palm-type-card .emoji{ font-size:22px; margin-left:6px; }

    /* ì†ê¸ˆ ì„œë¸Œíƒ€ìž… ì„ íƒ ì´ëª¨ì§€ ìŠ¤íƒ€ì¼ */
    .palm-subtype-emoji { 
      font-size: 48px;
      margin-bottom: 15px; 
      display: flex;
      justify-content: center;
      align-items: center;
      height: 80px;
    }

    /* âœ… ì†ê¸ˆ ê²°ê³¼ í…ìŠ¤íŠ¸ ì»¬ëŸ¬ ìˆ˜ì • */
    .card-description, .result-content {
      color: #333 !important;
      line-height: 1.7;
      font-size: 15px;
    }
    
    /* âœ… "ì˜ë¯¸:" ë¼ë²¨ ê°•ì¡° ìƒ‰ìƒ */
    .card-description strong, 
    .result-content strong,
    #sheetContent strong {
      color: #667eea !important;
      font-weight: 700;
    }
    
    /* âœ… ì†ê¸ˆ í•´ì„ ì¹´ë“œ ì „ì²´ ìŠ¤íƒ€ì¼ ê°œì„  */
    .result-card {
      background: white !important;
      color: #333 !important;
    }
    
    .result-card .card-description {
      color: #444 !important;
    }
    
    /* âœ… ì‹œíŠ¸ ë‚´ìš© ì „ì²´ í…ìŠ¤íŠ¸ ìƒ‰ìƒ */
    #sheetContent {
      color: #333 !important;
    }
    
    #sheetContent .card-description,
    #sheetContent .result-content {
      color: #444 !important;
    }
    
    /* âœ… ì •ë³´ ë°•ìŠ¤ í…ìŠ¤íŠ¸ */
    .info-content {
      color: #555 !important;
    }
    
    .info-content strong {
      color: #667eea !important;
    }
  `;
  const s = document.createElement('style');
  s.id = 'palm-style-tweak';
  s.textContent = css;
  document.head.appendChild(s);
})();

// ----- ìž…ë ¥ ì •ê·œí™” -----
function normalizeDateInput(s=''){
return s.trim().replace(/[.\s]+/g, '-').replace(/-+/g,'-').replace(/-$/,'');
}

function normalizeTimeInput(s=''){
s = s.trim();
const am = /ì˜¤ì „/.test(s);
const pm = /ì˜¤í›„/.test(s);
s = s.replace(/[^\d:]/g,'');
if(!s) return '';
let [hh, mm='0'] = s.split(':');
let h = parseInt(hh||'0',10);
if (pm && h < 12) h += 12;
if (am && h === 12) h = 0;
return `${String(h).padStart(2,'0')}:${String(mm).padStart(2,'0')}`;
}

// ì²œê°„ â†’ ì˜¤í–‰
const GAN_WUXING = {
'ç”²':'æœ¨','ä¹™':'æœ¨','ä¸™':'ç«','ä¸':'ç«','æˆŠ':'åœŸ','å·±':'åœŸ',
'åºš':'é‡‘','è¾›':'é‡‘','å£¬':'æ°´','ç™¸':'æ°´'
};

// ì§€ì§€ â†’ ìž¥ê°„(è—å¹²) ê°€ì¤‘ì¹˜
const ZHI_HIDDENS = {
'å­': { 'ç™¸':100 }, 'ä¸‘': { 'å·±':70, 'ç™¸':10, 'è¾›':20 }, 'å¯…': { 'ç”²':60, 'ä¸™':20, 'æˆŠ':20 },
'å¯': { 'ä¹™':100 }, 'è¾°': { 'æˆŠ':70, 'ä¹™':10, 'ç™¸':20 }, 'å·³': { 'ä¸™':60, 'åºš':20, 'æˆŠ':20 },
'åˆ': { 'ä¸':90, 'å·±':10 }, 'æœª': { 'å·±':70, 'ä¸':10, 'ä¹™':20 }, 'ç”³': { 'åºš':70, 'æˆŠ':20, 'å£¬':10 },
'é…‰': { 'è¾›':100 }, 'æˆŒ': { 'æˆŠ':70, 'è¾›':20, 'ä¸':10 }, 'äº¥': { 'å£¬':90, 'ç”²':10 }
};

// ì˜¤í–‰ ì •ë³´
const WUXING_INFO = {
'æœ¨': { ko:'ëª©', trait:'ì„±ìž¥Â·ê¸°íšÂ·ì°½ì˜', boost:'í‘¸ë¥¸ìƒ‰, ìˆ²ê¸¸ ê±·ê¸°, ì‹ ì„  ì±„ì†Œ, ìƒˆ í”„ë¡œì íŠ¸ ì‹œìž‘', color:'#4caf50' },
'ç«': { ko:'í™”', trait:'ì—´ì •Â·í‘œí˜„Â·ë¦¬ë”ì‹­', boost:'í–‡ë¹›, ê°€ë²¼ìš´ ìœ ì‚°ì†Œ, ë°œí‘œ/ê³µê°œ í™œë™, ë”°ëœ»í•œ ìƒ‰', color:'#f44336' },
'åœŸ': { ko:'í† ', trait:'ì•ˆì •Â·ì‹ ë¢°Â·ì‹¤í–‰', boost:'ì •ë¦¬/ì •ëˆ, ë£¨í‹´ ë§Œë“¤ê¸°, ë…¸ëž€/ê°ˆìƒ‰, ë•… ë°Ÿê¸°', color:'#ff9800' },
'é‡‘': { ko:'ê¸ˆ', trait:'ê·œì¹™Â·ë¶„ì„Â·ìž¬ì •', boost:'í™”ì´íŠ¸/ë©”íƒˆ, êµ¬ì¡°í™”, ìž¬ë¬´ì •ë¦¬, ê°€ë²¼ìš´ ê·¼ë ¥ìš´ë™', color:'#9e9e9e' },
'æ°´': { ko:'ìˆ˜', trait:'ìœ ì—°Â·í•™ìŠµÂ·ì†Œí†µ', boost:'ë¸”ë£¨/ë¸”ëž™, ë…ì„œ/ì—°êµ¬, í˜¸í¡/ìˆ˜ë¶„, ì‚°ì±…', color:'#2196f3' }
};

// ì‹­ì‹  ì„¤ëª…
const SHISHEN_DESC = {
'ì •ê´€':'ê·œë²”Â·ì±…ìž„Â·ê´€ë¦¬/í–‰ì •. ê³µê³µÂ·ìš´ì˜Â·ê´€ë¦¬ ì§ë¬´ì— ì í•©.',
'íŽ¸ê´€':'ë„ì „Â·ìœ„ê¸°ëŒ€ì‘Â·í˜„ìž¥ ë¦¬ë”ì‹­. ê²½ìŸ/ë³´ì•ˆ/ì²´ë ¥ ë¶„ì•¼.',
'ì •ìž¬':'í˜„ì‹¤ ìˆ˜ìµÂ·ìžì›ê´€ë¦¬. ì˜ì—…/ìž¬ë¬´/ìš´ì˜ì— ê°•ì .',
'íŽ¸ìž¬':'í™•ìž¥Â·ë„¤íŠ¸ì›Œí‚¹Â·ì‚¬ì—…ê°. ìœ í†µ/ë§ˆì¼€íŒ…/ì°½ì—… ì ì„±.',
'ì‹ì‹ ':'ìƒì‚°Â·ê±´ê°•Â·ì½˜í…ì¸  ì œìž‘. ë£¨í‹´Â·ì§€ì† ì°½ì¶œ ê°•ì .',
'ìƒê´€':'í‘œí˜„Â·ê¸°íšÂ·ê°œë°œ/í˜ì‹ . í¬ë¦¬ì—ì´í‹°ë¸ŒÂ·R&D.',
'ì •ì¸':'í•™ìŠµÂ·ì—°êµ¬Â·ìžê²©. êµìœ¡/ë¶„ì„/ì „ë¬¸ì§€ì‹ ê°•í™”.',
'íŽ¸ì¸':'ì „ëžµÂ·ì»¨ì„¤íŒ…Â·ìƒˆ íŒì§œê¸°. ê¸°íš/ë¯¸ë””ì–´/ë¸Œëžœë”©.',
'ë¹„ê²¬':'ìžê¸°ì£¼ë„Â·ë™ë£Œ í˜‘ì—…. ì°½ì—…/ê°œë°œ/ê°œì¸ë¸Œëžœë”©.',
'ê²ìž¬':'íŒ€ì›Œí¬Â·ì„¸ì¼ì¦ˆÂ·ê³µë™ í”„ë¡œì íŠ¸ ì¶”ì§„ë ¥.'
};

const SHISHEN_KR = { 
'æ­£å®˜':'ì •ê´€','ä¸ƒæ®º':'íŽ¸ê´€','åå®˜':'íŽ¸ê´€','æ¯”è‚©':'ë¹„ê²¬','åŠ«è²¡':'ê²ìž¬',
'é£Ÿç¥ž':'ì‹ì‹ ','å‚·å®˜':'ìƒê´€','åè²¡':'íŽ¸ìž¬','æ­£è²¡':'ì •ìž¬','åå°':'íŽ¸ì¸','æ­£å°':'ì •ì¸' 
};

function krShiShen(s=''){ 
return Object.entries(SHISHEN_KR).reduce((t,[c,k])=>t.replaceAll(c,k), s||''); 
}

function getCalMode(prefix){ 
return document.getElementById(`${prefix}-cal-lunar`)?.checked ? 'lunar' : 'solar'; 
}

function getLeap(prefix){ 
return !!document.getElementById(`${prefix}-leap`)?.checked; 
}

function bindCalToggle(prefix){
const solar = document.getElementById(`${prefix}-cal-solar`);
const lunar = document.getElementById(`${prefix}-cal-lunar`);
const leap = document.getElementById(`${prefix}-leap`);
if(!leap) return;
const sync = ()=>{ 
leap.disabled = !lunar.checked; 
leap.parentElement.style.opacity = leap.disabled?0.5:1; 
};
solar?.addEventListener('change', sync);
lunar?.addEventListener('change', sync);
sync();
}

function fmtSolar(solar){
const y = solar.getYear(), m=String(solar.getMonth()).padStart(2,'0'), d=String(solar.getDay()).padStart(2,'0');
return `${y}-${m}-${d}`;
}

function toSolarFromInput(dateStrRaw, timeStrRaw, mode='solar', isLeap=false){
const dateStr = normalizeDateInput(dateStrRaw||'');
const timeStr = normalizeTimeInput(timeStrRaw||'');
if(!dateStr) throw new Error('ìƒë…„ì›”ì¼ì„ ìž…ë ¥í•˜ì„¸ìš”');
const [y,m0,d] = dateStr.split('-').map(Number);
let h=0, min=0, s=0;
if (timeStr) { [h,min] = timeStr.split(':').map(Number); }
if (mode === 'lunar'){
const m = isLeap ? -Math.abs(m0) : Math.abs(m0);
try{
const ly = LunarYear.fromYear(y);
const leapMonth = ly.getLeapMonth();
if (isLeap && leapMonth !== Math.abs(m0)) {
alert(`${y}ë…„ì—ëŠ” ìœ¤${String(m0).padStart(2,'0')}ì›”ì´ ì—†ìŠµë‹ˆë‹¤.`);
}
}catch(_){}
const lunar = Lunar.fromYmdHms(y, m, d, h||0, min||0, s);
return lunar.getSolar();
}
return Solar.fromYmdHms(y, m0, d, h||0, min||0, s);
}

function add(counts, el, w=1){ 
if(!el) return; 
counts[el]=(counts[el]||0)+w; 
}

function getGan(gz){ return gz ? gz[0] : ''; }
function getZhi(gz){ return gz ? gz[gz.length-1] : '';}

function computeBaZi(dateStrRaw, timeStrRaw, calMode='solar', isLeap=false) {
const solar = toSolarFromInput(dateStrRaw, timeStrRaw, calMode, isLeap);
const lunar = solar.getLunar();
const ec = lunar.getEightChar();
const pillars = {
year: ec.getYear(),
month: ec.getMonth(),
day: ec.getDay(),
time: ec.getTime()
};
const countsGan = { 'æœ¨':0,'ç«':0,'åœŸ':0,'é‡‘':0,'æ°´':0 };
const countsZhi = { 'æœ¨':0,'ç«':0,'åœŸ':0,'é‡‘':0,'æ°´':0 };
const countsAll = { 'æœ¨':0,'ç«':0,'åœŸ':0,'é‡‘':0,'æ°´':0 };
[pillars.year, pillars.month, pillars.day, pillars.time].forEach(gz=>{
if(!gz) return;
const elG = GAN_WUXING[getGan(gz)];
add(countsGan, elG, 1);
add(countsAll, elG, 1);
const hiddens = ZHI_HIDDENS[getZhi(gz)] || {};
Object.entries(hiddens).forEach(([hiddenGan, pct])=>{
const elZ = GAN_WUXING[hiddenGan];
const w = pct/100;
add(countsZhi, elZ, w);
add(countsAll, elZ, w);
});
});
const tenGods = {
y: (ec.getYearShiShenGan && ec.getYearShiShenGan()) || '',
m: (ec.getMonthShiShenGan && ec.getMonthShiShenGan()) || '',
d: 'ì¼ê°„',
t: (ec.getTimeShiShenGan && ec.getTimeShiShenGan()) || ''
};
return { pillars, countsGan, countsZhi, countsAll, lunar, solar, tenGods, calMode, isLeap };
}

// ===== ìŠ¤í”Œëž˜ì‹œ í™”ë©´ =====
function startApp(){
const splash=$('#splashScreen'), main=$('#mainContent'), nav=$('#bottomNav');
if (splash) splash.classList.add('hidden');
setTimeout(()=>{ 
if (splash) splash.style.display='none'; 
if (main) main.classList.add('show'); 
if (nav) nav.classList.add('show'); 
},600);
}

// ===== ì†ê¸ˆ ì´ëª¨ì§€ ë§¤í•‘ =====
const PALM_TYPE_EMOJIS = {
  life: 'ðŸŒ±',
  head: 'ðŸ§ ', 
  heart: 'ðŸ’–',
  fate: 'âœ¨',
  sun: 'â˜€ï¸',
  marriage: 'ðŸ’•',
  health: 'âš•ï¸',
  intuition: 'ðŸ”®',
  venus: 'ðŸ’«'
};

// ===== ì†ê¸ˆ ë°ì´í„° =====
const PALM_READINGS = {
life: {
name: "ìƒëª…ì„  (ç”Ÿå‘½ç·š)",
description: "ê±´ê°•ê³¼ ìƒëª…ë ¥, ì²´ë ¥ì„ ë‚˜íƒ€ë‚´ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ê¸´ ìƒëª…ì„ ",
meaning: "ê±´ê°•í•˜ê³  ìž¥ìˆ˜í•  ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤. ì²´ë ¥ì´ ì¢‹ê³  í™œë ¥ì´ ë„˜ì¹˜ë©°, ë³‘ì— ëŒ€í•œ ì €í•­ë ¥ì´ ê°•í•©ë‹ˆë‹¤. ì ê·¹ì ì´ê³  ì—ë„ˆì§€ê°€ í’ë¶€í•œ ì„±ê²©ìœ¼ë¡œ ì–´ë ¤ì›€ì„ ìž˜ ê·¹ë³µí•©ë‹ˆë‹¤.",
advice: "ê·œì¹™ì ì¸ ìš´ë™ê³¼ ê±´ê°•í•œ ì‹ìŠµê´€ì„ ìœ ì§€í•˜ë©´ íƒ€ê³ ë‚œ ê±´ê°•ì„ ë”ìš± ì˜¤ëž˜ ìœ ì§€í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤."
},
{
type: "ì§§ì€ ìƒëª…ì„ ",
meaning: "ì„¬ì„¸í•˜ê³  ì˜ˆë¯¼í•œ ì„±ê²©ìž…ë‹ˆë‹¤. ê±´ê°• ê´€ë¦¬ì— ë”ìš± ì‹ ê²½ì¨ì•¼ í•˜ë©°, ìŠ¤íŠ¸ë ˆìŠ¤ì— ë¯¼ê°í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤. í•˜ì§€ë§Œ ì§‘ì¤‘ë ¥ì´ ë›°ì–´ë‚˜ê³  íš¨ìœ¨ì ìœ¼ë¡œ ì¼ì„ ì²˜ë¦¬í•©ë‹ˆë‹¤.",
advice: "ì¶©ë¶„í•œ íœ´ì‹ê³¼ ìŠ¤íŠ¸ë ˆìŠ¤ ê´€ë¦¬, ì •ê¸°ì ì¸ ê±´ê°•ê²€ì§„ì´ ì¤‘ìš”í•©ë‹ˆë‹¤."
},
{
type: "ê¹Šê³  ëšœë ·í•œ ìƒëª…ì„ ",
meaning: "ê°•ì¸í•œ ì²´ë ¥ê³¼ ì˜ì§€ë ¥ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. ë„ì „ ì •ì‹ ì´ ê°•í•˜ê³  ëª©í‘œ ë‹¬ì„± ëŠ¥ë ¥ì´ ë›°ì–´ë‚©ë‹ˆë‹¤. ë¦¬ë”ì‹­ì´ ìžˆê³  ì¶”ì§„ë ¥ì´ ê°•í•©ë‹ˆë‹¤.",
advice: "íƒ€ê³ ë‚œ ë¦¬ë”ì‹­ì„ í™œìš©í•´ í° ëª©í‘œì— ë„ì „í•´ë³´ì„¸ìš”. ë‹¤ë§Œ ê³¼ë¡œì— ì£¼ì˜í•˜ì„¸ìš”."
}
]
},
head: {
name: "ì§€í˜œì„  (çŸ¥æ…§ç·š)",
description: "ì§€ëŠ¥ê³¼ ì‚¬ê³ ë ¥, í•™ìŠµëŠ¥ë ¥ì„ ë³´ì—¬ì£¼ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ê¸´ ì§€í˜œì„ ",
meaning: "ë›°ì–´ë‚œ ë¶„ì„ë ¥ê³¼ ì‚¬ê³ ë ¥ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. í•™ìŠµëŠ¥ë ¥ì´ ìš°ìˆ˜í•˜ê³  ë³µìž¡í•œ ë¬¸ì œë¥¼ í•´ê²°í•˜ëŠ” ëŠ¥ë ¥ì´ ë›°ì–´ë‚©ë‹ˆë‹¤. ì—°êµ¬, ê¸°íš, ë¶„ì„ ë¶„ì•¼ì— ì í•©í•©ë‹ˆë‹¤.",
advice: "ì§€ì†ì ì¸ í•™ìŠµê³¼ ì—°êµ¬ë¥¼ í†µí•´ ì „ë¬¸ì„±ì„ ê¸°ë¥´ë©´ í° ì„±ì·¨ë¥¼ ì´ë£° ìˆ˜ ìžˆìŠµë‹ˆë‹¤."
},
{
type: "ì§§ì€ ì§€í˜œì„ ",
meaning: "ì§ê´€ì ì´ê³  ì‹¤ìš©ì ì¸ ì‚¬ê³ ë¥¼ í•©ë‹ˆë‹¤. ë³µìž¡í•œ ê²ƒë³´ë‹¤ëŠ” ë‹¨ìˆœí•˜ê³  ëª…í™•í•œ ê²ƒì„ ì„ í˜¸í•˜ë©°, ì‹¤í–‰ë ¥ì´ ë›°ì–´ë‚©ë‹ˆë‹¤. í˜„ì‹¤ì ì¸ íŒë‹¨ë ¥ì´ ì¢‹ìŠµë‹ˆë‹¤.",
advice: "ì§ê´€ë ¥ì„ ë¯¿ê³  ë¹ ë¥¸ ì‹¤í–‰ë ¥ì„ í™œìš©í•˜ë©´ ì¢‹ì€ ê²°ê³¼ë¥¼ ì–»ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤."
},
{
type: "ê³¡ì„ í˜• ì§€í˜œì„ ",
meaning: "ì°½ì˜ì ì´ê³  ì˜ˆìˆ ì ì¸ ê°ì„±ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. ìƒìƒë ¥ì´ í’ë¶€í•˜ê³  ë…ì°½ì ì¸ ì•„ì´ë””ì–´ë¥¼ ìž˜ ëƒ…ë‹ˆë‹¤. ì˜ˆìˆ , ë””ìžì¸, ì°½ìž‘ ë¶„ì•¼ì— ìž¬ëŠ¥ì´ ìžˆìŠµë‹ˆë‹¤.",
advice: "ì°½ì˜ì ì¸ í™œë™ê³¼ ì˜ˆìˆ  ë¶„ì•¼ì— ë„ì „í•´ë³´ì„¸ìš”. ìƒìƒë ¥ì„ í˜„ì‹¤ë¡œ ë§Œë“œëŠ” ë…¸ë ¥ì´ í•„ìš”í•©ë‹ˆë‹¤."
}
]
},
heart: {
name: "ê°ì •ì„  (æ„Ÿæƒ…ç·š)",
description: "ì‚¬ëž‘ê³¼ ê°ì •, ì¸ê°„ê´€ê³„ë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ê¸´ ê°ì •ì„ ",
meaning: "ë”°ëœ»í•˜ê³  ì• ì •ì´ ë§Žì€ ì„±ê²©ìž…ë‹ˆë‹¤. ê°ì • í‘œí˜„ì´ í’ë¶€í•˜ê³  íƒ€ì¸ì„ ë°°ë ¤í•˜ëŠ” ë§ˆìŒì´ ê¹ŠìŠµë‹ˆë‹¤. ì‚¬ëž‘ì— ì ê·¹ì ì´ê³  í—Œì‹ ì ìž…ë‹ˆë‹¤.",
advice: "ë”°ëœ»í•œ ë§ˆìŒì„ ê°€ì§„ ìž¥ì ì„ ì‚´ë ¤ ì¸ê°„ê´€ê³„ì—ì„œ ì¤‘ì‹¬ ì—­í• ì„ í•´ë³´ì„¸ìš”."
},
{
type: "ì§§ì€ ê°ì •ì„ ",
meaning: "í˜„ì‹¤ì ì´ê³  ì´ì„±ì ì¸ ì‚¬ëž‘ì„ ì¶”êµ¬í•©ë‹ˆë‹¤. ê°ì •ë³´ë‹¤ëŠ” ë…¼ë¦¬ì  íŒë‹¨ì„ ì¤‘ì‹œí•˜ë©°, ì•ˆì •ì ì¸ ê´€ê³„ë¥¼ ì„ í˜¸í•©ë‹ˆë‹¤. ë…ë¦½ì ì¸ ì„±í–¥ì´ ê°•ìŠµë‹ˆë‹¤.",
advice: "ì´ì„±ì ì¸ íŒë‹¨ë ¥ì„ ë°”íƒ•ìœ¼ë¡œ í•œ ì•ˆì •ì ì¸ ê´€ê³„ë¥¼ êµ¬ì¶•í•˜ëŠ” ê²ƒì´ ì¢‹ìŠµë‹ˆë‹¤."
},
{
type: "ê³¡ì„ í˜• ê°ì •ì„ ",
meaning: "ë¡œë§¨í‹±í•˜ê³  ê°ì„±ì ì¸ ì„±ê²©ìž…ë‹ˆë‹¤. ì‚¬ëž‘ì— ëŒ€í•œ ì´ìƒì´ ë†’ê³  ë“œë¼ë§ˆí‹±í•œ ì—°ì• ë¥¼ ì¢‹ì•„í•©ë‹ˆë‹¤. ì˜ˆìˆ ì  ê°ì„±ì´ í’ë¶€í•©ë‹ˆë‹¤.",
advice: "ë¡œë§¨í‹±í•œ ê°ì„±ì„ ì˜ˆìˆ ì´ë‚˜ ì°½ìž‘ í™œë™ìœ¼ë¡œ í‘œí˜„í•´ë³´ì„¸ìš”."
}
]
},
fate: {
name: "ìš´ëª…ì„  (é‹å‘½ç·š)",
description: "ì§ì—…ìš´ê³¼ ì‚¬íšŒì  ì„±ì·¨ë¥¼ ë³´ì—¬ì£¼ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ëšœë ·í•œ ìš´ëª…ì„ ",
meaning: "ê°•í•œ ëª©ì  ì˜ì‹ê³¼ ì•¼ë§ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. ì‚¬íšŒì  ì„±ê³µì„ ì´ë£° ê°€ëŠ¥ì„±ì´ ë†’ê³ , ë¦¬ë”ì‹­ì´ ë›°ì–´ë‚©ë‹ˆë‹¤. ìžìˆ˜ì„±ê°€í˜• ì¸ë¬¼ìž…ë‹ˆë‹¤.",
advice: "ëª…í™•í•œ ëª©í‘œë¥¼ ì„¸ìš°ê³  ê¾¸ì¤€ížˆ ë…¸ë ¥í•˜ë©´ í° ì„±ì·¨ë¥¼ ì´ë£° ìˆ˜ ìžˆìŠµë‹ˆë‹¤."
},
{
type: "íë¦° ìš´ëª…ì„ ",
meaning: "ìžìœ ë¡œìš´ ì˜í˜¼ìœ¼ë¡œ ê³ ì •ëœ í‹€ì„ ì‹«ì–´í•©ë‹ˆë‹¤. ë‹¤ì–‘í•œ ê²½í—˜ì„ ì¶”êµ¬í•˜ë©°, ë³€í™”ë¥¼ ë‘ë ¤ì›Œí•˜ì§€ ì•ŠìŠµë‹ˆë‹¤. ì°½ì˜ì ì¸ ë¶„ì•¼ì— ì í•©í•©ë‹ˆë‹¤.",
advice: "ë‹¤ì–‘í•œ ê²½í—˜ì„ í†µí•´ ìžì‹ ë§Œì˜ ê¸¸ì„ ì°¾ì•„ê°€ëŠ” ê²ƒì´ ì¢‹ìŠµë‹ˆë‹¤."
},
{
type: "ì´ì¤‘ ìš´ëª…ì„ ",
meaning: "ë‹¤ìž¬ë‹¤ëŠ¥í•˜ê³  ì—¬ëŸ¬ ë¶„ì•¼ì—ì„œ ì„±ê³µí•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ë¶€ì—…ì´ë‚˜ íˆ¬ìž¡ì— ì„±ê³µí•  ê°€ëŠ¥ì„±ì´ ë†’ê³ , ë‹¤ì–‘í•œ ìˆ˜ìž…ì›ì„ ê°€ì§ˆ ìˆ˜ ìžˆìŠµë‹ˆë‹¤.",
advice: "ì—¬ëŸ¬ ë¶„ì•¼ì— ê´€ì‹¬ì„ ê°€ì§€ê³  ë‹¤ì–‘í•œ ê¸°íšŒë¥¼ ëª¨ìƒ‰í•´ë³´ì„¸ìš”."
}
]
},
sun: {
name: "íƒœì–‘ì„  (å¤ªé™½ç·š)",
description: "ëª…ì˜ˆì™€ ì¸ê¸°, ì˜ˆìˆ ì  ìž¬ëŠ¥ì„ ë‚˜íƒ€ë‚´ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ëšœë ·í•œ íƒœì–‘ì„ ",
meaning: "ì²œë¶€ì ì¸ ë§¤ë ¥ê³¼ ìž¬ëŠ¥ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. ì‚¬ëžŒë“¤ì—ê²Œ ì¸ê¸°ê°€ ë§Žê³  ì˜ˆìˆ ì  ê°ê°ì´ ë›°ì–´ë‚©ë‹ˆë‹¤. ëª…ì˜ˆì™€ ì„±ê³µì„ ì–»ì„ ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤.",
advice: "íƒ€ê³ ë‚œ ë§¤ë ¥ê³¼ ìž¬ëŠ¥ì„ í™œìš©í•´ ì‚¬ëžŒë“¤ ì•žì— ì„œëŠ” ì¼ì„ í•´ë³´ì„¸ìš”."
},
{
type: "íë¦° íƒœì–‘ì„ ",
meaning: "ê²¸ì†í•˜ê³  í˜„ì‹¤ì ì¸ ì„±ê²©ìž…ë‹ˆë‹¤. í™”ë ¤í•¨ë³´ë‹¤ëŠ” ì‹¤ì†ì„ ì¶”êµ¬í•˜ë©°, ê¾¸ì¤€í•œ ë…¸ë ¥ìœ¼ë¡œ ì„±ê³¼ë¥¼ ì´ë£¹ë‹ˆë‹¤. ì•ˆì •ì ì¸ ì„±ê³µì„ ì¶”êµ¬í•©ë‹ˆë‹¤.",
advice: "ê¾¸ì¤€í•œ ë…¸ë ¥ê³¼ ì‹¤ë ¥ ìŒ“ê¸°ì— ì§‘ì¤‘í•˜ë©´ ì¢‹ì€ ê²°ê³¼ë¥¼ ì–»ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤."
},
{
type: "ì—¬ëŸ¬ ê°ˆëž˜ íƒœì–‘ì„ ",
meaning: "ë‹¤ì–‘í•œ ë¶„ì•¼ì—ì„œ ìž¬ëŠ¥ì„ ë°œíœ˜í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ë©€í‹°í”Œë ˆì´ì–´ íƒ€ìž…ìœ¼ë¡œ ì—¬ëŸ¬ ê°€ì§€ ì¼ì„ ë™ì‹œì— ìž˜ ì²˜ë¦¬í•©ë‹ˆë‹¤. ì¸ë§¥ì´ ë„“ìŠµë‹ˆë‹¤.",
advice: "ë‹¤ì–‘í•œ ë¶„ì•¼ì— ë„ì „í•˜ê³  í­ë„“ì€ ì¸ë§¥ì„ í™œìš©í•´ë³´ì„¸ìš”."
}
]
},
marriage: {
name: "ê²°í˜¼ì„  (çµå©šç·š)",
description: "ê²°í˜¼ê³¼ ì—°ì• , ë°°ìš°ìžìš´ì„ ë³´ì—¬ì£¼ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "í•œ ê°œì˜ ëšœë ·í•œ ê²°í˜¼ì„ ",
meaning: "í•œ ì‚¬ëžŒê³¼ ê¹Šê³  ì§„ì‹¤í•œ ì‚¬ëž‘ì„ ë‚˜ëˆŒ ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤. ê²°í˜¼ì— ëŒ€í•œ ì§„ì§€í•œ íƒœë„ë¥¼ ê°€ì§€ê³  ìžˆìœ¼ë©°, ë°°ìš°ìžì™€ í‰ìƒì„ í•¨ê»˜í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤.",
advice: "ì§„ì‹¤í•œ ì‚¬ëž‘ì„ ë§Œë‚˜ë©´ ì‹ ì¤‘í•˜ê²Œ ê²°ì •í•˜ê³  ì†Œì¤‘ížˆ ì—¬ê¸°ì„¸ìš”."
},
{
type: "ì—¬ëŸ¬ ê°œì˜ ê²°í˜¼ì„ ",
meaning: "ì¸ê¸°ê°€ ë§Žê³  ì—°ì•  ê¸°íšŒê°€ ë§ŽìŠµë‹ˆë‹¤. ë‹¤ì–‘í•œ ì‚¬ëžŒë“¤ê³¼ì˜ ë§Œë‚¨ì„ í†µí•´ ê²½í—˜ì„ ìŒ“ìŠµë‹ˆë‹¤. ì„ íƒì˜ í­ì´ ë„“ì–´ ì‹ ì¤‘í•œ ê²°ì •ì´ í•„ìš”í•©ë‹ˆë‹¤.",
advice: "ë‹¤ì–‘í•œ ë§Œë‚¨ ì¤‘ì—ì„œ ì§„ì •í•œ ì¸ì—°ì„ ì‹ ì¤‘í•˜ê²Œ ì„ íƒí•˜ì„¸ìš”."
},
{
type: "ìœ„ë¡œ í–¥í•˜ëŠ” ê²°í˜¼ì„ ",
meaning: "í–‰ë³µí•œ ê²°í˜¼ìƒí™œì„ í•  ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤. ë°°ìš°ìžë¡œë¶€í„° ë§Žì€ ë„ì›€ì„ ë°›ì„ ìˆ˜ ìžˆìœ¼ë©°, ê²°í˜¼ í›„ ìš´ì´ ìƒìŠ¹í•©ë‹ˆë‹¤. ê¸ˆìŠ¬ì´ ì¢‹ì€ ë¶€ë¶€ê°€ ë©ë‹ˆë‹¤.",
advice: "ê²°í˜¼ì„ í†µí•´ ë”ìš± ë°œì „í•  ìˆ˜ ìžˆìœ¼ë‹ˆ ì¢‹ì€ ì¸ì—°ì„ ë§Œë‚˜ë©´ ì ê·¹ì ìœ¼ë¡œ ë‹¤ê°€ê°€ì„¸ìš”."
}
]
},
health: {
name: "ê±´ê°•ì„  (å¥åº·ç·š)",
description: "ê±´ê°•ìƒíƒœì™€ ì§ˆë³‘ ì˜ˆë°©ì„ ë‚˜íƒ€ë‚´ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ì—†ëŠ” ê±´ê°•ì„ ",
meaning: "ê±´ê°•ì„ ì´ ì—†ëŠ” ê²ƒì´ ê°€ìž¥ ì¢‹ìŠµë‹ˆë‹¤. íƒ€ê³ ë‚œ ê±´ê°•ì²´ì§ˆë¡œ í° ë³‘ì¹˜ë ˆ ì—†ì´ ê±´ê°•í•˜ê²Œ ì‚´ ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ì²´ë ¥ì´ ì¢‹ê³  ë©´ì—­ë ¥ì´ ê°•í•©ë‹ˆë‹¤.",
advice: "í˜„ìž¬ì˜ ê±´ê°•ì„ ìœ ì§€í•˜ê¸° ìœ„í•´ ê·œì¹™ì ì¸ ìƒí™œê³¼ ì ë‹¹í•œ ìš´ë™ì„ í•˜ì„¸ìš”."
},
{
type: "ëšœë ·í•œ ê±´ê°•ì„ ",
meaning: "ê±´ê°•ì— ë”ìš± ì‹ ê²½ì¨ì•¼ í•  í•„ìš”ê°€ ìžˆìŠµë‹ˆë‹¤. ìŠ¤íŠ¸ë ˆìŠ¤ë‚˜ ê³¼ë¡œì— ì£¼ì˜í•˜ê³ , ì •ê¸°ì ì¸ ê±´ê°•ê²€ì§„ì´ ì¤‘ìš”í•©ë‹ˆë‹¤. ì¡°ê¸° ë°œê²¬ê³¼ ì˜ˆë°©ì´ í•µì‹¬ìž…ë‹ˆë‹¤.",
advice: "ê±´ê°•ê´€ë¦¬ì— ì ê·¹ì ìœ¼ë¡œ íˆ¬ìží•˜ê³ , ìŠ¤íŠ¸ë ˆìŠ¤ ê´€ë¦¬ì™€ ì¶©ë¶„í•œ íœ´ì‹ì„ ì·¨í•˜ì„¸ìš”."
},
{
type: "ëŠì–´ì§„ ê±´ê°•ì„ ",
meaning: "íŠ¹ì • ì‹œê¸°ì— ê±´ê°•ìƒ ì£¼ì˜ê°€ í•„ìš”í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤. í•˜ì§€ë§Œ ì ì ˆí•œ ê´€ë¦¬ì™€ ì¹˜ë£Œë¡œ ì¶©ë¶„ížˆ ê·¹ë³µ ê°€ëŠ¥í•©ë‹ˆë‹¤. ì˜ˆë°©ì´ ìµœìš°ì„ ìž…ë‹ˆë‹¤.",
advice: "ì •ê¸°ê²€ì§„ì„ ë¹ ëœ¨ë¦¬ì§€ ë§ê³ , ëª¸ì˜ ì‹ í˜¸ì— ë¯¼ê°í•˜ê²Œ ë°˜ì‘í•˜ì—¬ ì¡°ê¸° ëŒ€ì²˜í•˜ì„¸ìš”."
}
]
},
intuition: {
name: "ì§ê°ì„  (ç›´æ„Ÿç·š)",
description: "ì§ê°ë ¥ê³¼ ì˜ê°, ì´ˆëŠ¥ë ¥ì„ ë³´ì—¬ì£¼ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ëšœë ·í•œ ì§ê°ì„ ",
meaning: "ë›°ì–´ë‚œ ì§ê°ë ¥ê³¼ ì˜ê°ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. ì˜ˆìˆ , ìƒë‹´, ì¹˜ë£Œ ë¶„ì•¼ì—ì„œ íŠ¹ë³„í•œ ìž¬ëŠ¥ì„ ë°œíœ˜í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ì‚¬ëžŒì˜ ë§ˆìŒì„ ìž˜ ì½ê³  ê³µê° ëŠ¥ë ¥ì´ ë›°ì–´ë‚©ë‹ˆë‹¤.",
advice: "ì§ê°ì„ ë¯¿ê³  í™œìš©í•˜ë˜, ë…¼ë¦¬ì  ì‚¬ê³ ì™€ ê· í˜•ì„ ë§žì¶”ì„¸ìš”. ì˜ì  ëŠ¥ë ¥ì„ ë°œì „ì‹œí‚¤ëŠ” ê²ƒë„ ì¢‹ìŠµë‹ˆë‹¤."
},
{
type: "íë¦° ì§ê°ì„ ",
meaning: "ìž ìž¬ëœ ì§ê°ë ¥ì„ ê°€ì§€ê³  ìžˆì§€ë§Œ ì•„ì§ ì¶©ë¶„ížˆ ë°œí˜„ë˜ì§€ ì•Šì•˜ìŠµë‹ˆë‹¤. ëª…ìƒì´ë‚˜ ìš”ê°€ ë“±ì„ í†µí•´ ë‚´ë©´ì˜ ì†Œë¦¬ì— ê·€ ê¸°ìš¸ì´ë©´ ëŠ¥ë ¥ì´ ê°œë°œë  ìˆ˜ ìžˆìŠµë‹ˆë‹¤.",
advice: "ëª…ìƒê³¼ ìžê¸°ì„±ì°°ì„ í†µí•´ ë‚´ë©´ì˜ ëª©ì†Œë¦¬ì— ì§‘ì¤‘í•˜ê³ , ì§ê°ë ¥ì„ ê¸°ë¥´ëŠ” ì—°ìŠµì„ í•˜ì„¸ìš”."
},
{
type: "ì´ì¤‘ ì§ê°ì„ ",
meaning: "ë§¤ìš° ì˜ˆë¯¼í•˜ê³  ì„¬ì„¸í•œ ê°ìˆ˜ì„±ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. íƒ€ì¸ì˜ ê°ì •ì— ì‰½ê²Œ ë™ì¡°í•˜ë©°, ì¹˜ìœ ë‚˜ ìƒë‹´ ë¶„ì•¼ì—ì„œ íƒì›”í•œ ëŠ¥ë ¥ì„ ë°œíœ˜í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤.",
advice: "ë¯¼ê°í•¨ì„ ìž¥ì ìœ¼ë¡œ í™œìš©í•˜ë˜, íƒ€ì¸ì˜ ë¶€ì •ì  ì—ë„ˆì§€ì— ë„ˆë¬´ ì˜í–¥ë°›ì§€ ì•Šë„ë¡ ì£¼ì˜í•˜ì„¸ìš”."
}
]
},
venus: {
name: "ê¸ˆì„±ëŒ€ (é‡‘æ˜Ÿå¸¶)",
description: "ì˜ˆìˆ ì„±ê³¼ ê°ìˆ˜ì„±, ì°½ì¡°ë ¥ì„ ë‚˜íƒ€ë‚´ëŠ” ì„ ìž…ë‹ˆë‹¤.",
types: [
{
type: "ì™„ì „í•œ ê¸ˆì„±ëŒ€",
meaning: "ë›°ì–´ë‚œ ì˜ˆìˆ ì  ê°ê°ê³¼ ì°½ì¡°ë ¥ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. ë¯¸ì  ê°ê°ì´ ë›°ì–´ë‚˜ë©°, ì˜ˆìˆ  ë¶„ì•¼ì—ì„œ ì„±ê³µí•  ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤. ê°ì„±ì´ í’ë¶€í•˜ê³  ë¡œë§¨í‹±í•œ ì„±ê²©ìž…ë‹ˆë‹¤.",
advice: "ì˜ˆìˆ ì  ìž¬ëŠ¥ì„ ì ê·¹ ê°œë°œí•˜ê³ , ì°½ìž‘ í™œë™ì— ë„ì „í•´ë³´ì„¸ìš”. ì•„ë¦„ë‹¤ì›€ì„ ì¶”êµ¬í•˜ëŠ” ì¼ì— ì í•©í•©ë‹ˆë‹¤."
},
{
type: "ëŠì–´ì§„ ê¸ˆì„±ëŒ€",
meaning: "ê°ìˆ˜ì„±ì´ ì˜ˆë¯¼í•˜ì—¬ ìŠ¤íŠ¸ë ˆìŠ¤ë¥¼ ë§Žì´ ë°›ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ì™„ë²½ì£¼ì˜ ì„±í–¥ì´ ê°•í•˜ê³ , ì•„ë¦„ë‹¤ìš´ ê²ƒì— ëŒ€í•œ ìš•êµ¬ê°€ ê°•í•©ë‹ˆë‹¤. ë•Œë¡œëŠ” í˜„ì‹¤ê³¼ ì´ìƒ ì‚¬ì´ì—ì„œ ê°ˆë“±í•©ë‹ˆë‹¤.",
advice: "ìŠ¤íŠ¸ë ˆìŠ¤ ê´€ë¦¬ê°€ ì¤‘ìš”í•˜ë©°, ì™„ë²½í•¨ë³´ë‹¤ëŠ” ê³¼ì •ì„ ì¦ê¸°ëŠ” ë§ˆìŒê°€ì§ì„ ê°€ì§€ì„¸ìš”."
},
{
type: "ì—¬ëŸ¬ ê°ˆëž˜ ê¸ˆì„±ëŒ€",
meaning: "ë‹¤ì–‘í•œ ë¶„ì•¼ì˜ ì˜ˆìˆ ì— ê´€ì‹¬ì´ ë§Žê³  ìž¬ëŠ¥ì´ ìžˆìŠµë‹ˆë‹¤. ê°ì •ì˜ ê¸°ë³µì´ í´ ìˆ˜ ìžˆì§€ë§Œ, ê·¸ë§Œí¼ í’ë¶€í•œ ê°ì„±ì„ ê°€ì§€ê³  ìžˆìŠµë‹ˆë‹¤. ë©€í‹° ì•„í‹°ìŠ¤íŠ¸ íƒ€ìž…ìž…ë‹ˆë‹¤.",
advice: "ë‹¤ì–‘í•œ ì˜ˆìˆ  ë¶„ì•¼ë¥¼ ê²½í—˜í•´ë³´ê³ , ê°ì •ì˜ ê¸°ë³µì„ ì°½ìž‘ì˜ ì›ë™ë ¥ìœ¼ë¡œ í™œìš©í•˜ì„¸ìš”."
}
]
}
};

// ===== íƒ€ë¡œ ë°ì´í„° =====
const TAROT_DETAILS = [
{name:"THE FOOL (ë°”ë³´)",meaning:"ìƒˆë¡œìš´ ì‹œìž‘ê³¼ ìˆœìˆ˜í•¨ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ìƒˆë¡œìš´ ì‹œìž‘, ìˆœì§„í•¨, ìžë°œì„±",reversed:"ë¬´ëª¨í•¨, ê²½ì†”í•¨, ìœ„í—˜í•œ í–‰ë™"},
{name:"THE MAGICIAN (ë§ˆë²•ì‚¬)",meaning:"ì˜ì§€ë ¥ê³¼ ì°½ì¡°ë ¥ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ì˜ì§€ë ¥, ì°½ì¡°ë ¥, ì§‘ì¤‘",reversed:"ê¸°ë§Œ, ì¡°ìž‘, ëŠ¥ë ¥ ë¶€ì¡±"},
{name:"THE HIGH PRIESTESS (ì—¬êµí™©)",meaning:"ì§ê°ê³¼ ë‚´ë©´ì˜ ì§€í˜œë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ì§ê°, ë¬´ì˜ì‹, ì‹ ë¹„",reversed:"ë¹„ë°€, ìˆ¨ê²¨ì§„ ë™ê¸°, ì§ê° ë¬´ì‹œ"},
{name:"THE EMPRESS (ì—¬í™©ì œ)",meaning:"í’ìš”ì™€ ëª¨ì„±ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"í’ìš”, ëª¨ì„±, ì°½ì¡°ì„±",reversed:"ë¶ˆìž„, ì°½ì¡°ì„± ë¶€ì¡±, ê³¼ë³´í˜¸"},
{name:"THE EMPEROR (í™©ì œ)",meaning:"ê¶Œìœ„ì™€ ì•ˆì •ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ê¶Œìœ„, êµ¬ì¡°, ì§ˆì„œ",reversed:"ë…ìž¬, ê¶Œìœ„ì£¼ì˜, ê²½ì§ì„±"},
{name:"THE HIEROPHANT (êµí™©)",meaning:"ì „í†µê³¼ êµìœ¡ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ì „í†µ, êµìœ¡, ì¢…êµ",reversed:"ë°˜í•­, ë¹„ì •í†µì„±, ìƒˆë¡œìš´ ì ‘ê·¼ë²•"},
{name:"THE LOVERS (ì—°ì¸)",meaning:"ì‚¬ëž‘ê³¼ ì„ íƒì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ì‚¬ëž‘, ê´€ê³„, ì„ íƒ",reversed:"ë¶ˆê· í˜•, ê°ˆë“±, ìž˜ëª»ëœ ì„ íƒ"},
{name:"THE CHARIOT (ì „ì°¨)",meaning:"ìŠ¹ë¦¬ì™€ ì˜ì§€ë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ìŠ¹ë¦¬, ì˜ì§€ë ¥, ìžì œë ¥",reversed:"í†µì œë ¥ ìƒì‹¤, ë°©í–¥ì„± ë¶€ì¡±"},
{name:"STRENGTH (íž˜)",meaning:"ë‚´ì  íž˜ê³¼ ìš©ê¸°ë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ë‚´ì  íž˜, ìš©ê¸°, ì¸ë‚´",reversed:"ì•½í•¨, ìžê¸° ì˜ì‹¬, ì—ë„ˆì§€ ë¶€ì¡±"},
{name:"THE HERMIT (ì€ë‘”ìž)",meaning:"ë‚´ì  íƒêµ¬ì™€ ì§€í˜œë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ë‚´ì  íƒêµ¬, ì§€í˜œ, ì„±ì°°",reversed:"ê³ ë¦½, ì™¸ë¡œì›€, ìž˜ëª»ëœ ì¡°ì–¸"},
{name:"WHEEL OF FORTUNE (ìš´ëª…ì˜ ë°”í€´)",meaning:"ë³€í™”ì™€ ìš´ëª…ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ë³€í™”, ìš´ëª…, ê¸°íšŒ",reversed:"ë¶ˆìš´, í†µì œë ¥ ìƒì‹¤, ì™¸ë¶€ ì˜í–¥"},
{name:"JUSTICE (ì •ì˜)",meaning:"ê³µì •ê³¼ ê· í˜•ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ì •ì˜, ê³µì •ì„±, ì§„ì‹¤",reversed:"ë¶ˆê³µì •, íŽ¸ê²¬, ì±…ìž„ íšŒí”¼"},
{name:"THE HANGED MAN (ë§¤ë‹¬ë¦° ë‚¨ìž)",meaning:"í¬ìƒê³¼ ê´€ì ì˜ ì „í™˜ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"í¬ìƒ, ê´€ì  ì „í™˜, ê¸°ë‹¤ë¦¼",reversed:"ë¶ˆí•„ìš”í•œ í¬ìƒ, ì§€ì—°, ì €í•­"},
{name:"DEATH (ì£½ìŒ)",meaning:"ë³€í™”ì™€ ìž¬ìƒì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ë³€í™”, ëê³¼ ì‹œìž‘, ìž¬ìƒ",reversed:"ë³€í™”ì— ëŒ€í•œ ì €í•­, ì •ì²´"},
{name:"TEMPERANCE (ì ˆì œ)",meaning:"ê· í˜•ê³¼ ì¡°í™”ë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ê· í˜•, ì ˆì œ, ì¡°í™”",reversed:"ë¶ˆê· í˜•, ê³¼ë„í•¨, ì¡°ê¸‰í•¨"},
{name:"THE DEVIL (ì•…ë§ˆ)",meaning:"ìœ í˜¹ê³¼ ì†ë°•ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ìœ í˜¹, ì†ë°•, ì¤‘ë…",reversed:"í•´ë°©, ìžìœ , ì†ë°•ì—ì„œ ë²—ì–´ë‚¨"},
{name:"THE TOWER (íƒ‘)",meaning:"íŒŒê´´ì™€ ê¸‰ë³€ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"íŒŒê´´, ê¸‰ë³€, ê³„ì‹œ",reversed:"ë‚´ì  ë³€í™”, ê°œì¸ì  ë³€í™”"},
{name:"THE STAR (ë³„)",meaning:"í¬ë§ê³¼ ì˜ê°ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"í¬ë§, ì˜ê°, ì¹˜ìœ ",reversed:"ì ˆë§, í¬ë§ ìƒì‹¤, ë°©í–¥ì„± ë¶€ì¡±"},
{name:"THE MOON (ë‹¬)",meaning:"í™˜ìƒê³¼ ë¶ˆì•ˆì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"í™˜ìƒ, ë¶ˆì•ˆ, í˜¼ëž€",reversed:"ì§„ì‹¤ ë“œëŸ¬ë‚¨, ëª…í™•ì„±"},
{name:"THE SUN (íƒœì–‘)",meaning:"ê¸°ì¨ê³¼ ì„±ê³µì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ê¸°ì¨, ì„±ê³µ, í™œë ¥",reversed:"ì¼ì‹œì  ê¸°ì¨, ì—ë„ˆì§€ ë¶€ì¡±"},
{name:"JUDGEMENT (ì‹¬íŒ)",meaning:"ë¶€í™œê³¼ ê°ì„±ì„ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ë¶€í™œ, ê°ì„±, ìƒˆë¡œìš´ ì‹œìž‘",reversed:"ìžê¸° ì˜ì‹¬, ê³¼ê±°ì— ì–½ë§¤ìž„"},
{name:"THE WORLD (ì„¸ê³„)",meaning:"ì™„ì„±ê³¼ ì„±ì·¨ë¥¼ ë‚˜íƒ€ë‚´ëŠ” ì¹´ë“œìž…ë‹ˆë‹¤.",upright:"ì™„ì„±, ì„±ì·¨, í†µí•©",reversed:"ë¯¸ì™„ì„±, ëª©í‘œ ë¶€ì¡±, ì§€ì—°"}
];

const CARD_ICONS = ["ðŸƒ","ðŸŽ©","ðŸŒ™","ðŸ‘‘","ðŸ°","â›ª","ðŸ’•","ðŸŽï¸","ðŸ¦","ðŸ•¯ï¸","ðŸŽ¡","âš–ï¸","ðŸ™ƒ","ðŸ’€","ðŸ‘¼","ðŸ˜ˆ","ðŸ—¼","â­","ðŸŒ™","â˜€ï¸","ðŸ“¯","ðŸŒ"];

function closeAllOverlays(){
try { closeTarotModal(); } catch(e){}
try { closeSheet(); } catch(e){}
}

// ===== ë„¤ë¹„ê²Œì´ì…˜ =====
const pages = {
  get home() { return document.getElementById('page-home'); },
  get fortune() { return document.getElementById('page-fortune'); },
  get chat() { return document.getElementById('page-chat'); },
  get me() { return document.getElementById('page-me'); }
};

function setActiveTab(tab){
// ë©”ì¸ ì»¨í…Œì´ë„ˆ ë³´ì´ê²Œ ë§Œë“¤ê¸°  
const mainContent = document.getElementById('mainContent');
if (mainContent) mainContent.style.display = 'block';

$$('.nav-item').forEach(n=>n.classList.toggle('active',n.dataset.tab===tab));
Object.entries(pages).forEach(([k,el])=>el?.classList.toggle('show',k===tab));
closeAllOverlays();
}

$$('.nav-item[data-tab]').forEach(item=>{
  item.addEventListener('click', ()=>{
    const tab = item.dataset.tab || 'home';
    location.hash = '#/' + tab;      // ì£¼ì†Œí‘œì‹œì¤„ ë™ê¸°í™”
    reactCrystal(`${tab} íŽ˜ì´ì§€ë¡œ ì´ë™í•©ë‹ˆë‹¤! âœ¨`);
  });
});

$$('.service-item,.special-item').forEach(card=>{
  card.addEventListener('click', ()=>{
    const r = card.dataset.route || 'fortune-today';
    location.hash = '#/fortune/' + r.replace('fortune-','');
  });
});

// ===== í¬ë¦¬ìŠ¤íƒˆ =====
const mainCrystal=$('#mainCrystal');

function reactCrystal(text){
if(!mainCrystal) return;
mainCrystal.style.background='radial-gradient(circle at 30% 30%, rgba(255,215,0,.9), rgba(255,20,147,.7), rgba(138,43,226,.5))';
mainCrystal.innerHTML='ðŸ”®<br>ë¶„ì„ì¤‘...';
setTimeout(()=> mainCrystal.innerHTML=text||'âœ¨ ì¤€ë¹„ì¤‘ìž…ë‹ˆë‹¤...',800);
setTimeout(()=>{
mainCrystal.style.background='radial-gradient(circle at 30% 30%, rgba(255,255,255,.8), rgba(255,255,255,.3), transparent)';
mainCrystal.innerHTML='êµ¬ìŠ¬ ì† ë¯¸ëž˜ë¥¼<br>í™•ì¸í•´ë³´ì„¸ìš”';
},2800);
}

mainCrystal?.addEventListener('click',()=>reactCrystal('ðŸ”® ì‹ ë¹„ë¡œìš´ íž˜ì„ ëŠê»´ë³´ì„¸ìš”'));

// ===== ìš´ì„¸ ë·° =====
const fortuneTitle = $('#fortuneTitle');
const views = {
  'fortune-today': $('#view-today'),
  'fortune-saju' : $('#view-saju'),
  'fortune-tarot': $('#view-tarot'),
  'fortune-palm' : $('#view-palm'),
  'fortune-match': $('#view-match'),
  'fortune-year' : $('#view-year'),
  'fortune-lotto': $('#view-lotto')   // â† ë§ˆì§€ë§‰ í•­ëª©, ì‰¼í‘œ ì—†ìŒ(ì •ìƒ)
};

function showFortuneView(route){
  closeAllOverlays();
  Object.values(views).forEach(v => v && (v.style.display = 'none'));

  switch (route) {
    case 'fortune-today':
      fortuneTitle.textContent = 'ì˜¤ëŠ˜ì˜ ìš´ì„¸';
      views['fortune-today'].style.display = 'block';
      bindCalToggle('today');
      break;

    case 'fortune-saju':
      fortuneTitle.textContent = 'ì •í†µ ì‚¬ì£¼';
      views['fortune-saju'].style.display = 'block';
      bindCalToggle('saju');
      break;

    case 'fortune-tarot':
      fortuneTitle.textContent = 'íƒ€ë¡œ ì ';
      views['fortune-tarot'].style.display = 'block';
      initializeTarot();
      break;

    case 'fortune-palm':
      fortuneTitle.textContent = 'ì†ê¸ˆ ë³´ê¸°';
      views['fortune-palm'].style.display = 'block';
      setTimeout(() => initializePalmReading(), 50);
      break;

    case 'fortune-match':
      fortuneTitle.textContent = 'ê¶í•© ë³´ê¸°';
      views['fortune-match'].style.display = 'block';
      break;

    case 'fortune-year':
      fortuneTitle.textContent = 'ì‹ ë…„ ìš´ì„¸ (2025)';
      views['fortune-year'].style.display = 'block';
      break;

    case 'fortune-lotto':
      fortuneTitle.textContent = 'í–‰ìš´ë²ˆí˜¸';
      views['fortune-lotto'].style.display = 'block';
      break;

    default:
      fortuneTitle.textContent = 'ì¤€ë¹„ì¤‘';
      reactCrystal('âœ¨ ì¤€ë¹„ì¤‘ìž…ë‹ˆë‹¤...');
      break;
  }

  reactCrystal(`${fortuneTitle.textContent}ì„(ë¥¼) ì¤€ë¹„í•©ë‹ˆë‹¤â€¦`);
}

// ===== ê°„ë‹¨ ìš´ì„¸ =====
function pushRecent(item){
const arr=JSON.parse(localStorage.getItem(LS_KEY)||"[]");
arr.unshift({...item,ts:Date.now()});
localStorage.setItem(LS_KEY,JSON.stringify(arr.slice(0,20)));
}

// ìš´ì„¸ ì¹´í…Œê³ ë¦¬ë³„ ë©”ì‹œì§€ ë°ì´í„°
const FORTUNE_CATEGORIES = {
  total: {
    name: 'ì´ìš´',
    icon: 'ðŸŒŸ',
    messages: {
      90: ['ì˜¤ëŠ˜ì€ ëª¨ë“  ì¼ì´ ìˆ ìˆ  í’€ë¦¬ëŠ” ìµœê³ ì˜ ë‚ ìž…ë‹ˆë‹¤!', 'í–‰ìš´ì˜ ì—¬ì‹ ì´ í•¨ê»˜í•˜ëŠ” íŠ¹ë³„í•œ í•˜ë£¨ê°€ ë  ê²ƒìž…ë‹ˆë‹¤!', 'ê¿ˆê¾¸ë˜ ì¼ë“¤ì´ í˜„ì‹¤ì´ ë˜ëŠ” ë§ˆë²•ê°™ì€ ë‚ ìž…ë‹ˆë‹¤!'],
      80: ['ê¸ì •ì ì¸ ì—ë„ˆì§€ê°€ ë„˜ì¹˜ëŠ” ì¢‹ì€ ë‚ ìž…ë‹ˆë‹¤!', 'ìž‘ì€ ê¸°ì ë“¤ì´ ì¼ì–´ë‚  ìˆ˜ ìžˆëŠ” ë‚ ìž…ë‹ˆë‹¤!', 'ì¤€ë¹„í–ˆë˜ ì¼ë“¤ì´ ì¢‹ì€ ê²°ê³¼ë¡œ ì´ì–´ì§ˆ ê²ƒìž…ë‹ˆë‹¤!'],
      70: ['ì•ˆì •ì ì´ê³  í‰í™”ë¡œìš´ í•˜ë£¨ê°€ ë  ê²ƒìž…ë‹ˆë‹¤!', 'ì°¨ê·¼ì°¨ê·¼ ì§„í–‰í•˜ë©´ ì¢‹ì€ ì„±ê³¼ë¥¼ ì–»ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ì£¼ë³€ ì‚¬ëžŒë“¤ê³¼ì˜ ê´€ê³„ê°€ ë”ìš± ëˆë…í•´ì§ˆ ê²ƒìž…ë‹ˆë‹¤!'],
      60: ['ì¡°ê¸ˆë§Œ ë” ë…¸ë ¥í•˜ë©´ ì›í•˜ëŠ” ê²°ê³¼ë¥¼ ì–»ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ì¸ë‚´ì‹¬ì„ ê°–ê³  ê¾¸ì¤€ížˆ ë‚˜ì•„ê°€ì„¸ìš”!', 'ìž‘ì€ ë³€í™”ê°€ í° ë°œì „ìœ¼ë¡œ ì´ì–´ì§ˆ ê²ƒìž…ë‹ˆë‹¤!'],
      50: ['í˜„ìƒ ìœ ì§€í•˜ë©° ì•ˆì „í•˜ê²Œ ì§€ë‚´ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ê¸‰í•˜ê²Œ ì„œë‘ë¥´ì§€ ë§ê³  ì‹ ì¤‘í•˜ê²Œ íŒë‹¨í•˜ì„¸ìš”!', 'íœ´ì‹ì„ ì·¨í•˜ë©° ìž¬ì •ë¹„í•˜ëŠ” ì‹œê°„ìœ¼ë¡œ í™œìš©í•˜ì„¸ìš”!'],
      40: ['ì¡°ì‹¬ìŠ¤ëŸ½ê²Œ í–‰ë™í•˜ê³  ì‹ ì¤‘í•œ ê²°ì •ì„ ë‚´ë¦¬ì„¸ìš”!', 'ìž‘ì€ ì¼ë¶€í„° ì°¨ê·¼ì°¨ê·¼ í•´ê²°í•´ë‚˜ê°€ì„¸ìš”!', 'ì£¼ë³€ì˜ ì¡°ì–¸ì„ ê·€ë‹´ì•„ë“¤ìœ¼ë©´ ë„ì›€ì´ ë  ê²ƒìž…ë‹ˆë‹¤!'],
      30: ['ì˜¤ëŠ˜ì€ ë¬´ë¦¬í•˜ì§€ ë§ê³  ì—¬ìœ ë¡­ê²Œ ì§€ë‚´ì„¸ìš”!', 'ìŠ¤íŠ¸ë ˆìŠ¤ë¥¼ ì¤„ì´ê³  ë§ˆìŒì˜ í‰í™”ë¥¼ ì°¾ìœ¼ì„¸ìš”!', 'ë‚´ì¼ì„ ìœ„í•œ ì—ë„ˆì§€ë¥¼ ì¶©ì „í•˜ëŠ” ì‹œê°„ìœ¼ë¡œ ë³´ë‚´ì„¸ìš”!']
    }
  },
  love: {
    name: 'ì—°ì• ìš´',
    icon: 'ðŸ’•',
    messages: {
      90: ['ìš´ëª…ì ì¸ ë§Œë‚¨ì´ ê¸°ë‹¤ë¦¬ê³  ìžˆì„ì§€ë„ ëª°ë¼ìš”!', 'ì‚¬ëž‘í•˜ëŠ” ì‚¬ëžŒê³¼ì˜ ê´€ê³„ê°€ í•œì¸µ ë” ê¹Šì–´ì§ˆ ê²ƒìž…ë‹ˆë‹¤!', 'ë¡œë§¨í‹±í•œ ê³ ë°±ì´ë‚˜ í”„ë¡œí¬ì¦ˆë¥¼ ë°›ì„ ìˆ˜ ìžˆëŠ” ë‚ ìž…ë‹ˆë‹¤!'],
      80: ['ë‹¬ì½¤í•œ ì‚¬ëž‘ì˜ ê¸°ìš´ì´ ê°€ë“í•œ í•˜ë£¨ìž…ë‹ˆë‹¤!', 'ì¢‹ì•„í•˜ëŠ” ì‚¬ëžŒê³¼ì˜ ê±°ë¦¬ê°€ ê°€ê¹Œì›Œì§ˆ ê²ƒìž…ë‹ˆë‹¤!', 'ìƒˆë¡œìš´ ì¸ì—°ì„ ë§Œë‚  ê¸°íšŒê°€ ìƒê¸¸ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!'],
      70: ['ë”°ëœ»í•œ ë§ˆìŒì„ ë‚˜ëˆ„ëŠ” í‰ì˜¨í•œ ì—°ì• ìš´ìž…ë‹ˆë‹¤!', 'ì„œë¡œë¥¼ ì´í•´í•˜ê³  ë°°ë ¤í•˜ëŠ” ì‹œê°„ì„ ê°€ì ¸ë³´ì„¸ìš”!', 'ì†Œì†Œí•œ ë°ì´íŠ¸ë‚˜ ëŒ€í™”ê°€ ê´€ê³„ë¥¼ ëˆë…í•˜ê²Œ í•  ê²ƒìž…ë‹ˆë‹¤!'],
      60: ['ì¡°ê¸ˆ ë” ì ê·¹ì ìœ¼ë¡œ ë§ˆìŒì„ í‘œí˜„í•´ë³´ì„¸ìš”!', 'ìƒëŒ€ë°©ì˜ ìž…ìž¥ì—ì„œ ìƒê°í•´ë³´ëŠ” ê²ƒì´ ì¤‘ìš”í•©ë‹ˆë‹¤!', 'ì†”ì§í•œ ëŒ€í™”ë¡œ ì˜¤í•´ë¥¼ í’€ ìˆ˜ ìžˆì„ ê²ƒìž…ë‹ˆë‹¤!'],
      50: ['ì„£ë¶€ë¥¸ ê³ ë°±ë³´ë‹¤ëŠ” ì²œì²œížˆ ê´€ê³„ë¥¼ ë°œì „ì‹œí‚¤ì„¸ìš”!', 'ê°ì •ì ì¸ íŒë‹¨ë³´ë‹¤ëŠ” ì´ì„±ì ì¸ ì ‘ê·¼ì´ í•„ìš”í•©ë‹ˆë‹¤!', 'ìžì‹ ì„ ë” ì‚¬ëž‘í•˜ëŠ” ì‹œê°„ì„ ê°€ì ¸ë³´ì„¸ìš”!'],
      40: ['ì—°ì• ë³´ë‹¤ëŠ” ìžê¸°ê³„ë°œì— ì§‘ì¤‘í•˜ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ê°ˆë“±ì´ ìƒê¸¸ ìˆ˜ ìžˆìœ¼ë‹ˆ ë§ì¡°ì‹¬í•˜ì„¸ìš”!', 'í˜¼ìžë§Œì˜ ì‹œê°„ì„ ì¦ê¸°ë©° ë§ˆìŒì„ ì •ë¦¬í•´ë³´ì„¸ìš”!'],
      30: ['ì˜¤ëŠ˜ì€ ì—°ì•  ë¬¸ì œë¡œ ìŠ¤íŠ¸ë ˆìŠ¤ë°›ì§€ ë§ˆì„¸ìš”!', 'ì¹œêµ¬ë“¤ê³¼ì˜ ì‹œê°„ì„ ë” ì†Œì¤‘ížˆ ì—¬ê¸°ì„¸ìš”!', 'ìžì‹ ì˜ ë§¤ë ¥ì„ ê¸°ë¥´ëŠ” ë° ì§‘ì¤‘í•´ë³´ì„¸ìš”!']
    }
  },
  money: {
    name: 'ìž¬ë¬¼ìš´',
    icon: 'ðŸ’°',
    messages: {
      90: ['ì˜ˆìƒì¹˜ ëª»í•œ ìˆ˜ìž…ì´ë‚˜ ë³´ë„ˆìŠ¤ê°€ ìžˆì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'íˆ¬ìžë‚˜ ì‚¬ì—…ì—ì„œ í° ì„±ê³¼ë¥¼ ê±°ë‘˜ ê²ƒìž…ë‹ˆë‹¤!', 'ê¸ˆì „ì ì¸ ê¸°íšŒë¥¼ ë†“ì¹˜ì§€ ë§ˆì„¸ìš”!'],
      80: ['ëˆ ê´€ë¦¬ë¥¼ ìž˜í•˜ë©´ ëª©ëˆì„ ë§Œë“¤ ìˆ˜ ìžˆì„ ê²ƒìž…ë‹ˆë‹¤!', 'ë¶€ì—…ì´ë‚˜ ì‚¬ì´ë“œ í”„ë¡œì íŠ¸ì—ì„œ ìˆ˜ìµì´ ìƒê¸¸ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ì ˆì•½í•˜ëŠ” ìŠµê´€ì´ í° ë„ì›€ì´ ë  ê²ƒìž…ë‹ˆë‹¤!'],
      70: ['ì•ˆì •ì ì¸ ìˆ˜ìž…ê³¼ ì§€ì¶œ ê´€ë¦¬ê°€ ì´ë£¨ì–´ì§ˆ ê²ƒìž…ë‹ˆë‹¤!', 'ê³„íšì ì¸ ì €ì¶•ìœ¼ë¡œ ë¯¸ëž˜ë¥¼ ì¤€ë¹„í•˜ì„¸ìš”!', 'ìž‘ì€ íˆ¬ìžë¶€í„° ì‹œìž‘í•´ë³´ëŠ” ê²ƒë„ ì¢‹ê² ìŠµë‹ˆë‹¤!'],
      60: ['ê°€ê³„ë¶€ë¥¼ ìž‘ì„±í•˜ë©° ëˆì˜ íë¦„ì„ íŒŒì•…í•´ë³´ì„¸ìš”!', 'ë¶ˆí•„ìš”í•œ ì§€ì¶œì„ ì¤„ì´ëŠ” ê²ƒì´ ì¤‘ìš”í•©ë‹ˆë‹¤!', 'ìž¬ì • ê³„íšì„ ë‹¤ì‹œ í•œë²ˆ ì ê²€í•´ë³´ì„¸ìš”!'],
      50: ['í° ì§€ì¶œì€ í”¼í•˜ê³  í˜„ìƒ ìœ ì§€ì— ì§‘ì¤‘í•˜ì„¸ìš”!', 'ì¶©ë™êµ¬ë§¤ë¥¼ ìžì œí•˜ê³  ì‹ ì¤‘í•˜ê²Œ ì†Œë¹„í•˜ì„¸ìš”!', 'ë¹„ìƒê¸ˆì„ ë§ˆë ¨í•´ë‘ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!'],
      40: ['ëˆ ë¬¸ì œë¡œ ìŠ¤íŠ¸ë ˆìŠ¤ë°›ì§€ ì•Šë„ë¡ ì£¼ì˜í•˜ì„¸ìš”!', 'ëŒ€ì¶œì´ë‚˜ íˆ¬ìžëŠ” ì‹ ì¤‘í•˜ê²Œ ê²°ì •í•˜ì„¸ìš”!', 'ì „ë¬¸ê°€ì˜ ì¡°ì–¸ì„ êµ¬í•˜ëŠ” ê²ƒë„ ë°©ë²•ìž…ë‹ˆë‹¤!'],
      30: ['ì˜¤ëŠ˜ì€ ì§€ê°‘ì„ ë‹¨ë‹¨ížˆ ë‹«ì•„ë‘ì„¸ìš”!', 'ê¸ˆì „ ê±°ëž˜ëŠ” ìµœëŒ€í•œ í”¼í•˜ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ëˆë³´ë‹¤ëŠ” ê±´ê°•ê³¼ ê´€ê³„ì— ì‹ ê²½ì“°ì„¸ìš”!']
    }
  },
  health: {
    name: 'ê±´ê°•ìš´',
    icon: 'ðŸ’ª',
    messages: {
      90: ['ëª¸ê³¼ ë§ˆìŒì´ ìµœìƒì˜ ì»¨ë””ì…˜ì„ ìœ ì§€í•  ê²ƒìž…ë‹ˆë‹¤!', 'ìƒˆë¡œìš´ ìš´ë™ì´ë‚˜ ê±´ê°•ê´€ë¦¬ ë°©ë²•ì„ ì‹œìž‘í•˜ê¸° ì¢‹ì€ ë‚ ìž…ë‹ˆë‹¤!', 'í™œë ¥ì´ ë„˜ì¹˜ëŠ” í•˜ë£¨ë¥¼ ë³´ë‚¼ ìˆ˜ ìžˆì„ ê²ƒìž…ë‹ˆë‹¤!'],
      80: ['ê·œì¹™ì ì¸ ìƒí™œë¡œ ê±´ê°•ì´ ë”ìš± ì¢‹ì•„ì§ˆ ê²ƒìž…ë‹ˆë‹¤!', 'ê°€ë²¼ìš´ ìš´ë™ì´ë‚˜ ì‚°ì±…ì´ í° ë„ì›€ì´ ë  ê²ƒìž…ë‹ˆë‹¤!', 'ê· í˜•ìž¡ížŒ ì‹ë‹¨ìœ¼ë¡œ ëª¸ì˜ ë°¸ëŸ°ìŠ¤ë¥¼ ë§žì¶°ë³´ì„¸ìš”!'],
      70: ['ì „ë°˜ì ìœ¼ë¡œ ì•ˆì •ëœ ê±´ê°• ìƒíƒœë¥¼ ìœ ì§€í•  ê²ƒìž…ë‹ˆë‹¤!', 'ì¶©ë¶„í•œ ìˆ˜ë©´ê³¼ íœ´ì‹ì„ ì·¨í•˜ì„¸ìš”!', 'ìŠ¤íŠ¸ë ˆì¹­ì´ë‚˜ ìš”ê°€ë¡œ ëª¸ì˜ ê¸´ìž¥ì„ í’€ì–´ë³´ì„¸ìš”!'],
      60: ['ì»¨ë””ì…˜ ê´€ë¦¬ì— ë”ìš± ì‹ ê²½ì¨ì•¼ í•  ë•Œìž…ë‹ˆë‹¤!', 'ë¬´ë¦¬í•œ ìš´ë™ë³´ë‹¤ëŠ” ê°€ë²¼ìš´ í™œë™ì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ê±´ê°•ê²€ì§„ì„ ë°›ì•„ë³´ëŠ” ê²ƒë„ ì¢‹ê² ìŠµë‹ˆë‹¤!'],
      50: ['ê³¼ë¡œí•˜ì§€ ë§ê³  ì ë‹¹í•œ íœ´ì‹ì„ ì·¨í•˜ì„¸ìš”!', 'ê· í˜•ìž¡ížŒ ì‹ì‚¬ì™€ ì¶©ë¶„í•œ ìˆ˜ë¶„ ì„­ì·¨ê°€ ì¤‘ìš”í•©ë‹ˆë‹¤!', 'ìŠ¤íŠ¸ë ˆìŠ¤ ê´€ë¦¬ì— íŠ¹ë³„ížˆ ì‹ ê²½ì“°ì„¸ìš”!'],
      40: ['ëª¸ì˜ ì‹ í˜¸ë¥¼ ìž˜ ë“¤ì–´ë³´ê³  ë¬´ë¦¬í•˜ì§€ ë§ˆì„¸ìš”!', 'ìˆ , ë‹´ë°°, ì¹´íŽ˜ì¸ ì„­ì·¨ë¥¼ ì¤„ì´ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ì „ë¬¸ì˜ì™€ ìƒë‹´í•´ë³´ëŠ” ê²ƒì„ ê¶Œí•©ë‹ˆë‹¤!'],
      30: ['ì˜¤ëŠ˜ì€ ëª¸ì¡°ë¦¬ì— ì§‘ì¤‘í•˜ëŠ” ê²ƒì´ ìµœìš°ì„ ìž…ë‹ˆë‹¤!', 'ë¬´ë¦¬í•œ í™œë™ì€ í”¼í•˜ê³  í‘¹ ì‰¬ì„¸ìš”!', 'ëª¸ì— ì¢‹ì€ ìŒì‹ì„ ì±™ê²¨ë“œì‹œê¸° ë°”ëžë‹ˆë‹¤!']
    }
  },
  work: {
    name: 'ì§ìž¥ìš´',
    icon: 'ðŸ’¼',
    messages: {
      90: ['ìŠ¹ì§„ì´ë‚˜ ì¢‹ì€ ì†Œì‹ì´ ìžˆì„ ìˆ˜ ìžˆëŠ” ë‚ ìž…ë‹ˆë‹¤!', 'ìƒˆë¡œìš´ í”„ë¡œì íŠ¸ì—ì„œ í° ì„±ê³¼ë¥¼ ê±°ë‘˜ ê²ƒìž…ë‹ˆë‹¤!', 'ë™ë£Œë“¤ê³¼ì˜ í˜‘ì—…ì´ ì™„ë²½í•˜ê²Œ ì´ë£¨ì–´ì§ˆ ê²ƒìž…ë‹ˆë‹¤!'],
      80: ['ì—…ë¬´ ëŠ¥ë ¥ì´ ì¸ì •ë°›ì•„ ì¹­ì°¬ì„ ë“¤ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ìƒˆë¡œìš´ ê¸°íšŒë‚˜ ì œì•ˆì´ ë“¤ì–´ì˜¬ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ì°½ì˜ì ì¸ ì•„ì´ë””ì–´ë¡œ ë¬¸ì œë¥¼ í•´ê²°í•  ìˆ˜ ìžˆì„ ê²ƒìž…ë‹ˆë‹¤!'],
      70: ['ì•ˆì •ì ì´ê³  íš¨ìœ¨ì ìœ¼ë¡œ ì—…ë¬´ë¥¼ ì²˜ë¦¬í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'íŒ€ì›Œí¬ê°€ ì¢‹ì•„ì ¸ í”„ë¡œì íŠ¸ê°€ ìˆœì¡°ë¡­ê²Œ ì§„í–‰ë  ê²ƒìž…ë‹ˆë‹¤!', 'ê¾¸ì¤€í•œ ë…¸ë ¥ì´ ì¢‹ì€ ê²°ê³¼ë¡œ ì´ì–´ì§ˆ ê²ƒìž…ë‹ˆë‹¤!'],
      60: ['ì¡°ê¸ˆ ë” ì§‘ì¤‘í•˜ë©´ ì›í•˜ëŠ” ì„±ê³¼ë¥¼ ì–»ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ìƒì‚¬ë‚˜ ë™ë£Œì™€ì˜ ì†Œí†µì„ ëŠ˜ë ¤ë³´ì„¸ìš”!', 'ìƒˆë¡œìš´ ìŠ¤í‚¬ì„ ë°°ìš°ê¸° ì¢‹ì€ ì‹œê¸°ìž…ë‹ˆë‹¤!'],
      50: ['í˜„ìž¬ ë§¡ì€ ì¼ì— ì¶©ì‹¤í•˜ë©° ì‹¤ìˆ˜í•˜ì§€ ì•Šë„ë¡ ì£¼ì˜í•˜ì„¸ìš”!', 'ê¸‰í•œ ê²°ì •ë³´ë‹¤ëŠ” ì‹ ì¤‘í•œ íŒë‹¨ì´ í•„ìš”í•©ë‹ˆë‹¤!', 'ì›Œë¼ë°¸ì„ ìœ ì§€í•˜ë©° ë²ˆì•„ì›ƒì„ ì˜ˆë°©í•˜ì„¸ìš”!'],
      40: ['ì—…ë¬´ìƒ ê°ˆë“±ì´ë‚˜ ì˜¤í•´ê°€ ìƒê¸¸ ìˆ˜ ìžˆìœ¼ë‹ˆ ì¡°ì‹¬í•˜ì„¸ìš”!', 'ì¤‘ìš”í•œ ë¯¸íŒ…ì´ë‚˜ ë°œí‘œëŠ” í”¼í•˜ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ì‹¤ìˆ˜ë¥¼ ì¤„ì´ê¸° ìœ„í•´ ë”ìš± ê¼¼ê¼¼ížˆ ì²´í¬í•˜ì„¸ìš”!'],
      30: ['ì˜¤ëŠ˜ì€ ìƒˆë¡œìš´ ì¼ì„ ì‹œìž‘í•˜ì§€ ë§ê³  í˜„ìƒ ìœ ì§€í•˜ì„¸ìš”!', 'ìŠ¤íŠ¸ë ˆìŠ¤ë¥¼ ë°›ëŠ” ì—…ë¬´ëŠ” ë‚´ì¼ë¡œ ë¯¸ë£¨ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ë™ë£Œë“¤ê³¼ì˜ ê´€ê³„ì—ì„œ ì¡°ì‹¬ìŠ¤ëŸ½ê²Œ í–‰ë™í•˜ì„¸ìš”!']
    }
  },
  study: {
    name: 'í•™ì—…ìš´',
    icon: 'ðŸ“š',
    messages: {
      90: ['ì§‘ì¤‘ë ¥ì´ ìµœê³ ì¡°ì— ë‹¬í•´ ì–´ë ¤ìš´ ê³µë¶€ë„ ìˆ ìˆ  í’€ë¦´ ê²ƒìž…ë‹ˆë‹¤!', 'ì‹œí—˜ì´ë‚˜ ë°œí‘œì—ì„œ ë›°ì–´ë‚œ ì„±ê³¼ë¥¼ ê±°ë‘˜ ê²ƒìž…ë‹ˆë‹¤!', 'ìƒˆë¡œìš´ ì§€ì‹ì„ ë¹ ë¥´ê²Œ í¡ìˆ˜í•  ìˆ˜ ìžˆëŠ” ë‚ ìž…ë‹ˆë‹¤!'],
      80: ['í•™ìŠµ íš¨ìœ¨ì´ ë†’ì•„ì ¸ ë§Žì€ ê²ƒì„ ë°°ìš¸ ìˆ˜ ìžˆì„ ê²ƒìž…ë‹ˆë‹¤!', 'ê¶ê¸ˆí–ˆë˜ ë¬¸ì œë“¤ì´ ëª…ì¾Œí•˜ê²Œ í•´ê²°ë  ê²ƒìž…ë‹ˆë‹¤!', 'ê·¸ë£¹ ìŠ¤í„°ë””ë‚˜ í† ë¡ ì´ í° ë„ì›€ì´ ë  ê²ƒìž…ë‹ˆë‹¤!'],
      70: ['ê¾¸ì¤€í•œ í•™ìŠµìœ¼ë¡œ ì‹¤ë ¥ì´ í–¥ìƒë  ê²ƒìž…ë‹ˆë‹¤!', 'ë³µìŠµì„ í†µí•´ ê¸°ì´ˆë¥¼ ë”ìš± íƒ„íƒ„ížˆ ë‹¤ì§ˆ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ìƒˆë¡œìš´ í•™ìŠµ ë°©ë²•ì„ ì‹œë„í•´ë³´ëŠ” ê²ƒë„ ì¢‹ê² ìŠµë‹ˆë‹¤!'],
      60: ['ì¡°ê¸ˆ ë” ì§‘ì¤‘í•˜ë©´ ì›í•˜ëŠ” ì„±ê³¼ë¥¼ ì–»ì„ ìˆ˜ ìžˆìŠµë‹ˆë‹¤!', 'ì–´ë ¤ìš´ ë¶€ë¶„ì€ ì„ ìƒë‹˜ì´ë‚˜ ì¹œêµ¬ì—ê²Œ ë„ì›€ì„ ìš”ì²­í•˜ì„¸ìš”!', 'ê³„íšì ì¸ í•™ìŠµ ìŠ¤ì¼€ì¤„ì„ ì„¸ì›Œë³´ì„¸ìš”!'],
      50: ['ë¬´ë¦¬í•˜ì§€ ë§ê³  ìžì‹ ì˜ íŽ˜ì´ìŠ¤ì— ë§žì¶° ê³µë¶€í•˜ì„¸ìš”!', 'ì•”ê¸°ë³´ë‹¤ëŠ” ì´í•´ ìœ„ì£¼ì˜ í•™ìŠµì´ íš¨ê³¼ì ì¼ ê²ƒìž…ë‹ˆë‹¤!', 'ì¶©ë¶„í•œ íœ´ì‹ìœ¼ë¡œ ë‡Œë¥¼ ìž¬ì¶©ì „í•˜ì„¸ìš”!'],
      40: ['ì§‘ì¤‘ë ¥ì´ ë–¨ì–´ì§ˆ ìˆ˜ ìžˆìœ¼ë‹ˆ ì§§ì€ ì‹œê°„ì”© ê³µë¶€í•˜ì„¸ìš”!', 'ì¤‘ìš”í•œ ì‹œí—˜ì´ë‚˜ ê³¼ì œëŠ” ë‹¤ì‹œ í•œë²ˆ ì ê²€í•´ë³´ì„¸ìš”!', 'ìŠ¤íŠ¸ë ˆìŠ¤ë¥¼ ì¤„ì´ê³  ë§ˆìŒì„ íŽ¸ì•ˆí•˜ê²Œ ê°€ì§€ì„¸ìš”!'],
      30: ['ì˜¤ëŠ˜ì€ ê³µë¶€ë³´ë‹¤ëŠ” íœ´ì‹ì„ ì·¨í•˜ëŠ” ê²ƒì´ ì¢‹ê² ìŠµë‹ˆë‹¤!', 'ë¬´ë¦¬í•œ í•™ìŠµì€ í”¼í•˜ê³  ê°€ë²¼ìš´ ë…ì„œ ì •ë„ë§Œ í•˜ì„¸ìš”!', 'ì»¨ë””ì…˜ íšŒë³µì— ì§‘ì¤‘í•˜ëŠ” ì‹œê°„ìœ¼ë¡œ ë³´ë‚´ì„¸ìš”!']
    }
  }
};

// ëŸ­í‚¤ ì•„ì´í…œê³¼ ìƒ‰ìƒ ë°ì´í„°
const LUCKY_ITEMS = {
  items: ['ë°˜ì§€', 'ëª©ê±¸ì´', 'ì‹œê³„', 'í–¥ìˆ˜', 'ë¦½ë°¤', 'ì°¨í‚¤', 'ì§€ê°‘', 'ìŠ¤ë§ˆíŠ¸í° ì¼€ì´ìŠ¤', 'ë…¸íŠ¸', 'íŽœ', 'ë¨¸ê·¸ì»µ', 'ì´ì–´í°', 'ì„ ê¸€ë¼ìŠ¤', 'ëª¨ìž', 'ê°€ë°©', 'ì–‘ë§', 'í–¥ì´ˆ', 'ì‹ë¬¼', 'ì±…ê°ˆí”¼', 'ìŠ¤í‹°ì»¤'],
  colors: ['ë¹¨ê°•', 'íŒŒëž‘', 'ë…¸ëž‘', 'ì´ˆë¡', 'ë³´ë¼', 'ë¶„í™', 'í•˜ëŠ˜ìƒ‰', 'ì£¼í™©', 'í°ìƒ‰', 'ê²€ì •', 'ê¸ˆìƒ‰', 'ì€ìƒ‰', 'ë¯¼íŠ¸', 'ë¼ë²¤ë”', 'ì½”ëž„', 'í„°ì½°ì´ì¦ˆ'],
  numbers: ['3', '7', '9', '12', '21', '27', '33', '42', '51', '63'],
  directions: ['ë™ìª½', 'ì„œìª½', 'ë‚¨ìª½', 'ë¶ìª½', 'ë™ë‚¨ìª½', 'ë™ë¶ìª½', 'ì„œë‚¨ìª½', 'ì„œë¶ìª½']
};

// ê°œì„ ëœ ì˜¤ëŠ˜ì˜ ìš´ì„¸ ê³„ì‚° í•¨ìˆ˜
function calcEnhancedDailyFortune(birthdate) {
  const today = new Date();
  const dateStr = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;
  const results = {};
  
  Object.keys(FORTUNE_CATEGORIES).forEach((category, index) => {
    const seed = (birthdate || '').replaceAll('-', '') + dateStr + category + index;
    let hash = 0;
    for (let i = 0; i < seed.length; i++) {
      hash = (hash * 37 + seed.charCodeAt(i)) % 100000;
    }
    const score = Math.abs(hash) % 100;
    
    let messageKey = 30;
    if (score >= 85) messageKey = 90;
    else if (score >= 75) messageKey = 80;
    else if (score >= 65) messageKey = 70;
    else if (score >= 55) messageKey = 60;
    else if (score >= 45) messageKey = 50;
    else if (score >= 35) messageKey = 40;
    
    const messages = FORTUNE_CATEGORIES[category].messages[messageKey];
    const messageIndex = Math.abs(hash) % messages.length;
    
    results[category] = {
      name: FORTUNE_CATEGORIES[category].name,
      icon: FORTUNE_CATEGORIES[category].icon,
      score: score,
      message: messages[messageIndex]
    };
  });
  
  const luckyHash = birthdate.replaceAll('-', '') + dateStr + 'lucky';
  let lHash = 0;
  for (let i = 0; i < luckyHash.length; i++) {
    lHash = (lHash * 41 + luckyHash.charCodeAt(i)) % 100000;
  }
  
  const luckyItem = LUCKY_ITEMS.items[Math.abs(lHash) % LUCKY_ITEMS.items.length];
  const luckyColor = LUCKY_ITEMS.colors[Math.abs(lHash + 1) % LUCKY_ITEMS.colors.length];
  const luckyNumber = LUCKY_ITEMS.numbers[Math.abs(lHash + 2) % LUCKY_ITEMS.numbers.length];
  const luckyDirection = LUCKY_ITEMS.directions[Math.abs(lHash + 3) % LUCKY_ITEMS.directions.length];
  
  return {
    categories: results,
    lucky: {
      item: luckyItem,
      color: luckyColor,
      number: luckyNumber,
      direction: luckyDirection
    },
    date: dateStr
  };
}

// ìš´ì„¸ ê²°ê³¼ë¥¼ HTMLë¡œ ë Œë”ë§í•˜ëŠ” í•¨ìˆ˜
// ===== ì˜¤ë¥˜ ìˆ˜ì •: renderEnhancedDailyFortune í•¨ìˆ˜ êµì²´ =====

// ìš´ì„¸ ê²°ê³¼ë¥¼ HTMLë¡œ ë Œë”ë§í•˜ëŠ” í•¨ìˆ˜ (ìˆ˜ì •ëœ ë²„ì „)
function renderEnhancedDailyFortune(fortuneData, name = '') {
  const nameTitle = name ? `<b>${name}</b>ë‹˜ì˜ ` : '';
  
  let html = `
    <div class="result-section">
      <div class="section-title-result">ðŸŒŸ ${nameTitle}ì˜¤ëŠ˜ì˜ ìš´ì„¸</div>
      <div class="fortune-date">ðŸ“… ${fortuneData.date}</div>
    </div>
  `;
  
  // ê° ì¹´í…Œê³ ë¦¬ë³„ ìš´ì„¸ ì¹´ë“œ (ê¸°ì¡´ createResultCard í•¨ìˆ˜ ì‚¬ìš©)
  html += '<div class="result-section">';
  Object.values(fortuneData.categories).forEach((category, index) => {
    const isMainCard = index === 0; // ì²« ë²ˆì§¸ ì¹´ë“œ(ì´ìš´)ë¥¼ ë©”ì¸ìœ¼ë¡œ
    html += createResultCard(
      category.icon, 
      category.name, 
      `${category.score}ì `, 
      category.message, 
      isMainCard, 
      'fortune-card'
    );
  });
  html += '</div>';
  
  // ëŸ­í‚¤ ì •ë³´ ì„¹ì…˜
  html += `
    <div class="result-section">
      <div class="section-title-result">ðŸ€ ì˜¤ëŠ˜ì˜ ëŸ­í‚¤ ì•„ì´í…œ</div>
      <div class="lucky-items-grid">
        <div class="lucky-item-card">
          <div class="lucky-icon">ðŸŽ</div>
          <div class="lucky-label">ëŸ­í‚¤ ì•„ì´í…œ</div>
          <div class="lucky-value">${fortuneData.lucky.item}</div>
        </div>
        <div class="lucky-item-card">
          <div class="lucky-icon">ðŸŽ¨</div>
          <div class="lucky-label">ëŸ­í‚¤ ì»¬ëŸ¬</div>
          <div class="lucky-value">${fortuneData.lucky.color}</div>
        </div>
        <div class="lucky-item-card">
          <div class="lucky-icon">ðŸ”¢</div>
          <div class="lucky-label">ëŸ­í‚¤ ë„˜ë²„</div>
          <div class="lucky-value">${fortuneData.lucky.number}</div>
        </div>
        <div class="lucky-item-card">
          <div class="lucky-icon">ðŸ§­</div>
          <div class="lucky-label">ëŸ­í‚¤ ë°©í–¥</div>
          <div class="lucky-value">${fortuneData.lucky.direction}</div>
        </div>
      </div>
    </div>
  `;
  
  // ì•ˆë‚´ ì •ë³´
  html += `
    <div class="info-box">
      <div class="info-title">ðŸ“‹ ì˜¤ëŠ˜ì˜ ìš´ì„¸ ì•ˆë‚´</div>
      <div class="info-content">
        <strong>âœ¨ ë§¤ì¼ ìƒˆë¡œìš´ ìš´ì„¸:</strong> ì‹œê°„ëŒ€ë³„ë¡œ ë‹¤ë¥¸ ê²°ê³¼ê°€ ë‚˜íƒ€ë‚©ë‹ˆë‹¤.<br/>
        <strong>ðŸŽ¯ 6ê°€ì§€ ì˜ì—­:</strong> ì´ìš´, ì—°ì• ìš´, ìž¬ë¬¼ìš´, ê±´ê°•ìš´, ì§ìž¥ìš´, í•™ì—…ìš´ì„ ì¢…í•© ë¶„ì„<br/>
        <strong>ðŸ€ ëŸ­í‚¤ ì•„ì´í…œ:</strong> ì˜¤ëŠ˜ ì§€ë‹ˆê³  ë‹¤ë‹ˆë©´ ì¢‹ì€ ì•„ì´í…œë“¤ì„ ì¶”ì²œí•©ë‹ˆë‹¤.<br/>
        â€» ìš´ì„¸ëŠ” ìž¬ë¯¸ì™€ ì°¸ê³ ìš©ì´ë©°, ê¸ì •ì ì¸ ë§ˆìŒê°€ì§ì´ ê°€ìž¥ ì¤‘ìš”í•©ë‹ˆë‹¤.
      </div>
    </div>
  `;
  
  return html;
}

function calcMatch(a,b){
if(!a||!b) return {score:null,text:'ë‘ ìƒë…„ì›”ì¼ì„ ëª¨ë‘ ìž…ë ¥í•˜ì„¸ìš”.'};
const seed=(a+b).replaceAll('-',''); let h=0; for(let i=0;i<seed.length;i++) h=(h*33+seed.charCodeAt(i))%100000;
const s=h%101;
const text=s>=80?'ìš´ëª…ì„  ê°•í•˜ê²Œ ì—°ê²°! ì„œë¡œì˜ ì„±ìž¥ì„ ë°€ì–´ì¤ë‹ˆë‹¤.'
:s>=60?'ìž˜ ë§žëŠ” íŽ¸. ëŒ€í™”ì˜ ë¦¬ë“¬ì´ ì¢‹ìŠµë‹ˆë‹¤.'
:s>=40?'ë…¸ë ¥í˜• ê¶í•©. ê·œì¹™ì ì¸ ì†Œí†µì´ í•´ë²•.'
:s>=20?'ì°¨ì´ í¼. ê³µë™ì˜ ëª©í‘œë¥¼ ìž‘ê²Œ ìª¼ê°œë³´ì„¸ìš”.'
:'ìƒí™œ ë¦¬ë“¬Â·ê°€ì¹˜ê´€ ì ê²€ í•„ìš”. ì²œì²œížˆ ê´€ê³„ ì„¤ê³„í•˜ê¸°.';
return {score:s,text};
}

function calcYear(b){
if(!b) return {idx:null,text:'ìƒë…„ì›”ì¼ì„ ìž…ë ¥í•˜ì„¸ìš”.'};
const [y,m,d]=b.split('-').map(Number);
const k=(y+m+d+2025)%6;
const t=['ë„ì•½ì˜ í•´: ìƒˆë¡œìš´ ì§ë¬´ë‚˜ í”„ë¡œì íŠ¸ë¡œì˜ ì´ë™ì´ ìœ ë¦¬.','ì„±ìž¥ì˜ í•´: ë°°ì›€ì— íˆ¬ìží• ìˆ˜ë¡ ë³´ìƒì´ í¼.','ê´€ê³„ì˜ í•´: í˜‘ì—…/íŒŒíŠ¸ë„ˆì‹­ì—ì„œ ê¸°íšŒ.','ì•ˆì •ì˜ í•´: ìž¬ë¬´Â·ê±´ê°• ê´€ë¦¬ê°€ ì„±ê³¼ë¡œ.','ì „í™˜ì˜ í•´: ë‚¡ì€ ê²ƒì„ ë¹„ìš°ê³  ìƒˆë¡œ ì„¤ê³„.','íœ´ì‹ì˜ í•´: ê³¼ë¶€í•˜ë¥¼ ì¤„ì´ê³  íŽ˜ì´ìŠ¤ ì¡°ì ˆ.'][k];
return {idx:k,text:t};
}

// ===== ê²°ê³¼ ì‹œíŠ¸ =====
const sheet=$('#sheetBackdrop'),sheetTitle=$('#sheetTitle'),sheetContent=$('#sheetContent');
let lastResult=null;

function openSheet(title,content,savePayload){
if(!sheet) return;
sheetTitle.textContent=title;
if (typeof content === 'string' && content.includes('<')) {
sheetContent.innerHTML = content;
} else {
sheetContent.textContent = content?.toString?.() || '';
}
sheet.classList.add('show');
lastResult=savePayload||null;

setTimeout(() => {
$$('.element-fill').forEach(fill => {
const width = fill.style.width;
fill.style.width = '0%';
setTimeout(() => fill.style.width = width, 100);
});
}, 300);
}

function closeSheet(){
if(!sheet) return;
sheet.classList.remove('show');
}

$('#btnClose')?.addEventListener('click', closeSheet);
sheet?.addEventListener('click', e=>{ if(e.target===sheet) closeSheet(); });

$('#btnSave')?.addEventListener('click', ()=>{
if(!lastResult){ closeSheet(); return; }
const arr=JSON.parse(localStorage.getItem(LS_KEY)||"[]");
arr.unshift({...lastResult,ts:Date.now()});
localStorage.setItem(LS_KEY,JSON.stringify(arr.slice(0,20)));
const notice = document.createElement('div');
notice.textContent = 'ðŸ’¾ ìµœê·¼ ê²°ê³¼ì— ì €ìž¥ëìŠµë‹ˆë‹¤.';
notice.style.cssText = 'margin-top:16px;padding:12px;background:rgba(102,126,234,0.1);border-radius:8px;text-align:center;color:#667eea;font-weight:bold;';
sheetContent.appendChild(notice);
setTimeout(() => notice.remove(), 3000);
});

// ===== ì‚¬ì£¼ ìš´ì„¸í’€ì´ í•¨ìˆ˜ë“¤ =====
function createPillarsGrid(pillars) {
return `
<div class="pillars-grid">
<div class="pillar-card">
<div class="pillar-label">ì—°ì£¼</div>
<div class="pillar-value">${pillars.year || '-'}</div>
</div>
<div class="pillar-card">
<div class="pillar-label">ì›”ì£¼</div>
<div class="pillar-value">${pillars.month || '-'}</div>
</div>
<div class="pillar-card">
<div class="pillar-label">ì¼ì£¼</div>
<div class="pillar-value">${pillars.day || '-'}</div>
</div>
<div class="pillar-card">
<div class="pillar-label">ì‹œì£¼</div>
<div class="pillar-value">${pillars.time || '-'}</div>
</div>
</div>
`;
}

function createElementChart(countsAll) {
const KEYS = ['æœ¨','ç«','åœŸ','é‡‘','æ°´'];
const total = KEYS.reduce((a,k)=>a+(countsAll[k]||0),0);

let html = '<div class="element-distribution">';
KEYS.forEach(key => {
const info = WUXING_INFO[key];
const value = countsAll[key] || 0;
const percentage = total ? Math.round((value/total)*100) : 0;
html += `
<div class="element-item">
<div class="element-name">${info.ko}</div>
<div class="element-bar">
<div class="element-fill" style="width: ${percentage}%; background: ${info.color}"></div>
</div>
<div class="element-percentage">${percentage}%</div>
</div>
`;
});
html += '</div>';
return html;
}

function createResultCard(icon, title, value, description, isMain = false, cardType = '') {
let cardClass = 'result-card';
if (isMain) {
cardClass += ' main-result';
}
if (cardType) {
cardClass += ' ' + cardType;
}

const iconClass = cardType.includes('lifetime') ? 'card-icon lifetime' :
cardType.includes('daeun') ? 'card-icon daeun' :
cardType.includes('timing') ? 'card-icon timing' :
cardType.includes('caution') ? 'card-icon caution' :
cardType.includes('advice') ? 'card-icon advice' : 'card-icon';

return `
<div class="${cardClass}">
<div class="card-header">
<div class="${iconClass}">${icon}</div>
<div class="card-title">${title}</div>
</div>
<div class="card-value">${value}</div>
<div class="card-description">${description}</div>
</div>
`;
}

// ===== ì†ê¸ˆ í•µì‹¬ ìˆ˜ì • ë¶€ë¶„ =====

// ì‹¤ì œ ì† ì´ë¯¸ì§€ ê²½ë¡œ (ì œê³µë°›ì€ ì´ë¯¸ì§€ ì‚¬ìš©)
const PALM_BASE_IMG = 'https://i.imgur.com/c3jAyyh.png';

// ì†ê¸ˆ ë³€í™˜ ì„¤ì • (í•„ìš”ì‹œ ë¯¸ì„¸ì¡°ì •ìš©)
const PALM_TRANSFORMS = {
  base: { tx: 0, ty: 0, sx: 1, sy: 1, rot: 0 }
};

// ì‹¤ì œ ì† ì´ë¯¸ì§€ì— ë§žëŠ” ì •í™•í•œ ì†ê¸ˆ ì¢Œí‘œ (viewBox: 800x1200)
const PALM_PATHS = {
  life: {
    // ðŸ“ ì§§ì€ ìƒëª…ì„  - ì†ë°”ë‹¥ ì¤‘ê°„ê¹Œì§€ë§Œ (ì´ë¯¸ì§€ ì™¼ìª½)
    'ì§§ì€ ìƒëª…ì„ ': 'M580 380 Q 540 430 510 480 Q 485 520 470 560 Q 465 580 475 570',
    
    // ðŸ“ ê¸´ ìƒëª…ì„  - ì†ëª© ê·¼ì²˜ê¹Œì§€ ê¸¸ê²Œ (ì´ë¯¸ì§€ ì˜¤ë¥¸ìª½) 
    'ê¸´ ìƒëª…ì„ ': 'M580 380 Q 520 450 480 520 Q 440 600 420 680 Q 400 760 390 840 Q 385 920 395 1000 Q 410 1060 430 1100',
    
    // ðŸ“ ê¹Šê³  ëšœë ·í•œ ìƒëª…ì„  - ê°€ìž¥ ê¸¸ê³  ëšœë ·í•˜ê²Œ
    'ê¹Šê³  ëšœë ·í•œ ìƒëª…ì„ ': 'M585 375 Q 515 440 475 510 Q 435 590 415 670 Q 395 750 385 830 Q 380 910 390 990 Q 405 1050 425 1110'
  },
  head: {
    // ì´ë¯¸ì§€ ê¸°ì¤€ìœ¼ë¡œ ì •í™•í•œ ì§€í˜œì„  ì¢Œí‘œ ì¡°ì •
    'ê¸´ ì§€í˜œì„ ': 'M200 450 L 650 420',  // ì†ë°”ë‹¥ì„ ê±°ì˜ ê°€ë¡œì§ˆëŸ¬ ê¸´ ì§ì„ 
    'ì§§ì€ ì§€í˜œì„ ': 'M200 450 L 450 435',  // ì†ë°”ë‹¥ ì¤‘ê°„ê¹Œì§€ë§Œ
    'ê³¡ì„ í˜• ì§€í˜œì„ ': 'M200 450 Q 350 460 450 520 Q 500 560 520 600'  // ì•„ëž˜ë¡œ íœ˜ì–´ì§€ëŠ” ê³¡ì„ 
  },
  heart: {
    'ê¸´ ê°ì •ì„ ': 'M120 320 Q 200 315 280 312 Q 360 309 440 308 Q 520 307 580 310',
    'ì§§ì€ ê°ì •ì„ ': 'M140 325 Q 200 320 260 318 Q 320 316 380 316 Q 440 316 480 318',
    'ê³¡ì„ í˜• ê°ì •ì„ ': 'M130 330 Q 210 310 290 300 Q 370 290 450 295 Q 530 300 590 315'
  },
  fate: {
    'ëšœë ·í•œ ìš´ëª…ì„ ': 'M400 1100 Q 405 900 410 700 Q 415 500 420 300 Q 425 200 430 120',
    'íë¦° ìš´ëª…ì„ ': 'M400 1100 Q 402 980 404 860 M406 820 Q 408 700 410 580 M412 540 Q 414 420 416 300 M418 260 Q 420 180 422 140',
    'ì´ì¤‘ ìš´ëª…ì„ ': 'M390 1080 Q 393 880 396 680 Q 399 480 402 280 M410 1060 Q 413 860 416 660 Q 419 460 422 260 Q 425 160 428 100'
  },
  sun: {
    'ëšœë ·í•œ íƒœì–‘ì„ ': 'M520 1000 Q 525 850 530 700 Q 535 550 540 400 Q 545 300 550 220',
    'íë¦° íƒœì–‘ì„ ': 'M520 1000 Q 522 900 524 800 M526 760 Q 528 660 530 560 M532 520 Q 534 420 536 320 M538 280 Q 540 220 542 180',
    'ì—¬ëŸ¬ ê°ˆëž˜ íƒœì–‘ì„ ': 'M510 980 Q 513 830 516 680 Q 519 530 522 380 M520 1000 Q 525 850 530 700 Q 535 550 540 400 M530 960 Q 533 810 536 660 Q 539 510 542 360'
  },
  marriage: {
    'í•œ ê°œì˜ ëšœë ·í•œ ê²°í˜¼ì„ ': 'M100 300 L 140 295',
    'ì—¬ëŸ¬ ê°œì˜ ê²°í˜¼ì„ ': 'M100 290 L 135 285 M102 305 L 137 300 M104 320 L 139 315',
    'ìœ„ë¡œ í–¥í•˜ëŠ” ê²°í˜¼ì„ ': 'M100 310 Q 120 300 140 290'
  },
  health: {
    'ì—†ëŠ” ê±´ê°•ì„ ': '',
    'ëšœë ·í•œ ê±´ê°•ì„ ': 'M460 1080 Q 380 960 300 840 Q 220 720 160 600 Q 120 520 100 440',
    'ëŠì–´ì§„ ê±´ê°•ì„ ': 'M460 1080 Q 430 1020 400 960 M380 920 Q 340 860 300 800 M280 760 Q 240 700 200 640 M180 600 Q 150 560 120 520'
  },
  intuition: {
    'ëšœë ·í•œ ì§ê°ì„ ': 'M680 1060 Q 620 980 560 900 Q 500 820 440 740 Q 380 660 320 580',
    'íë¦° ì§ê°ì„ ': 'M680 1060 Q 650 1020 620 980 M600 940 Q 570 900 540 860 M520 820 Q 490 780 460 740 M440 700 Q 410 660 380 620',
    'ì´ì¤‘ ì§ê°ì„ ': 'M690 1070 Q 630 990 570 910 Q 510 830 450 750 M670 1040 Q 610 960 550 880 Q 490 800 430 720 Q 370 640 310 560'
  },
  venus: {
    'ì™„ì „í•œ ê¸ˆì„±ëŒ€': 'M580 280 Q 540 270 500 275 Q 460 280 420 290 Q 380 300 350 320',
    'ëŠì–´ì§„ ê¸ˆì„±ëŒ€': 'M580 280 Q 560 275 540 273 M520 272 Q 490 275 460 280 M440 285 Q 410 292 380 302 M360 308 Q 350 315 345 322',
    'ì—¬ëŸ¬ ê°ˆëž˜ ê¸ˆì„±ëŒ€': 'M585 285 Q 545 275 505 280 Q 465 285 425 295 M580 275 Q 540 265 500 270 Q 460 275 420 285 M575 295 Q 535 285 495 290 Q 455 295 415 305'
  }
};

// ì„  ìŠ¤íƒ€ì¼ ì„¤ì • (êµµê¸° ì¦ê°€)
const PALM_STYLES = {
  life: {
    'ê¸´ ìƒëª…ì„ ': { width: 12, color: '#E91E63', opacity: 1 },
    'ì§§ì€ ìƒëª…ì„ ': { width: 10, color: '#EC407A', opacity: 0.9 },
    'ê¹Šê³  ëšœë ·í•œ ìƒëª…ì„ ': { width: 14, color: '#C2185B', opacity: 1 }
  },
  head: {
    // ì´ë¯¸ì§€ì— ë§žê²Œ ì§€í˜œì„  ìŠ¤íƒ€ì¼ ì¡°ì •
    'ê¸´ ì§€í˜œì„ ': { width: 6, color: '#1565C0', opacity: 1 },      // íŒŒëž€ìƒ‰, ì ë‹¹í•œ êµµê¸°
    'ì§§ì€ ì§€í˜œì„ ': { width: 6, color: '#1976D2', opacity: 1 },     // íŒŒëž€ìƒ‰, ì ë‹¹í•œ êµµê¸°
    'ê³¡ì„ í˜• ì§€í˜œì„ ': { width: 6, color: '#0D47A1', opacity: 1 }    // ì§„í•œ íŒŒëž€ìƒ‰, ì ë‹¹í•œ êµµê¸°
  },
  heart: {
    'ê¸´ ê°ì •ì„ ': { width: 11, color: '#FF4081', opacity: 1 },
    'ì§§ì€ ê°ì •ì„ ': { width: 9, color: '#FF6EC7', opacity: 0.85 },
    'ê³¡ì„ í˜• ê°ì •ì„ ': { width: 10, color: '#F06292', opacity: 0.9 }
  },
  fate: {
    'ëšœë ·í•œ ìš´ëª…ì„ ': { width: 11, color: '#FF9800', opacity: 1 },
    'íë¦° ìš´ëª…ì„ ': { width: 7, color: '#FFB74D', opacity: 0.5 },
    'ì´ì¤‘ ìš´ëª…ì„ ': { width: 9, color: '#F57C00', opacity: 0.9 }
  },
  sun: {
    'ëšœë ·í•œ íƒœì–‘ì„ ': { width: 10, color: '#FFC107', opacity: 1 },
    'íë¦° íƒœì–‘ì„ ': { width: 7, color: '#FFCA28', opacity: 0.4 },
    'ì—¬ëŸ¬ ê°ˆëž˜ íƒœì–‘ì„ ': { width: 8, color: '#FFB300', opacity: 0.75 }
  },
  marriage: {
    'í•œ ê°œì˜ ëšœë ·í•œ ê²°í˜¼ì„ ': { width: 9, color: '#9C27B0', opacity: 1 },
    'ì—¬ëŸ¬ ê°œì˜ ê²°í˜¼ì„ ': { width: 7, color: '#BA68C8', opacity: 0.8 },
    'ìœ„ë¡œ í–¥í•˜ëŠ” ê²°í˜¼ì„ ': { width: 9, color: '#7B1FA2', opacity: 1 }
  },
  health: {
    'ì—†ëŠ” ê±´ê°•ì„ ': { width: 0, color: 'transparent', opacity: 0 },
    'ëšœë ·í•œ ê±´ê°•ì„ ': { width: 9, color: '#00BCD4', opacity: 1 },
    'ëŠì–´ì§„ ê±´ê°•ì„ ': { width: 7, color: '#4DD0E1', opacity: 0.6 }
  },
  intuition: {
    'ëšœë ·í•œ ì§ê°ì„ ': { width: 9, color: '#673AB7', opacity: 1 },
    'íë¦° ì§ê°ì„ ': { width: 6, color: '#9575CD', opacity: 0.5 },
    'ì´ì¤‘ ì§ê°ì„ ': { width: 8, color: '#512DA8', opacity: 0.85 }
  },
  venus: {
    'ì™„ì „í•œ ê¸ˆì„±ëŒ€': { width: 8, color: '#795548', opacity: 1 },
    'ëŠì–´ì§„ ê¸ˆì„±ëŒ€': { width: 7, color: '#A1887F', opacity: 0.6 },
    'ì—¬ëŸ¬ ê°ˆëž˜ ê¸ˆì„±ëŒ€': { width: 7, color: '#6D4C41', opacity: 0.75 }
  }
};

// ìŠ¤íƒ€ì¼ ì¶”ê°€ í•¨ìˆ˜
function ensurePalmLayoutStyles(){
  if (document.getElementById('palm-layout-fix')) return;
  const css = `
    :root { --sheetW: 640px; }
    #sheetContent .result-section,
    #sheetContent .palm-result-image,
    #sheetContent .result-card,
    #sheetContent .info-box { max-width: var(--sheetW); margin: 0 auto; }

    .palm-photo-wrap{ position:relative; background:#fff; border-radius:16px; overflow:hidden; max-width: 400px; margin: 0 auto; }
    .palm-photo-wrap img{ display:block; width:100%; height:auto; }
    .palm-photo-wrap .palm-overlay{ position:absolute; inset:0; width:100%; height:100%; pointer-events:none; }

    #view-palm .palm-type-card img,
    #view-palm .palm-type-card svg { display:none !important; }

    .palm-subtitle { 
      text-align: center; 
      margin-bottom: 25px; 
      color: #666; 
      font-size: 15px; 
      padding: 15px;
      background: #f8f9ff;
      border-radius: 10px;
    }
    
    .palm-subtypes-grid { 
      display: grid; 
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); 
      gap: 20px; 
    }
    
    .palm-subtype-card { 
      border: 3px solid #e0e0e0; 
      border-radius: 18px; 
      padding: 20px; 
      cursor: pointer; 
      transition: all 0.3s ease; 
      background: white;
      text-align: center;
    }
    
    .palm-subtype-card:hover { 
      border-color: #667eea; 
      transform: translateY(-5px); 
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.2); 
    }
    
    .palm-subtype-emoji { 
      font-size: 48px;
      margin-bottom: 15px; 
      display: flex;
      justify-content: center;
      align-items: center;
      height: 80px;
    }
    
    .palm-subtype-image { 
      margin-bottom: 15px; 
    }
    
    .palm-subtype-image .palm-photo-wrap { 
      max-height: 180px; 
      overflow: hidden; 
      margin: 0 auto;
    }
    
    .palm-subtype-title { 
      font-weight: bold; 
      color: #333; 
      margin-bottom: 8px; 
      text-align: center; 
      font-size: 16px;
    }
    
    .palm-subtype-preview { 
      font-size: 13px; 
      color: #666; 
      text-align: center; 
      line-height: 1.4; 
    }

    .result-card {
      background: white;
      border-radius: 15px;
      padding: 25px;
      margin: 20px 0;
      box-shadow: 0 4px 15px rgba(0,0,0,0.08);
      border-left: 5px solid #667eea;
    }
    
    .result-header {
      display: flex;
      align-items: center;
      margin-bottom: 18px;
    }
    
    .result-icon, .card-icon {
      font-size: 28px;
      margin-right: 15px;
    }
    
    .result-title, .card-title {
      font-size: 20px;
      font-weight: bold;
      color: #333;
    }
    
    .result-subtitle {
      font-size: 15px;
      color: #666;
      margin-top: 3px;
    }
    
    .result-content, .card-description {
      color: #333;
      line-height: 1.7;
      font-size: 15px;
    }
    
    .result-content strong, .card-description strong {
      color: #667eea;
      font-weight: 700;
    }

    .section-title-result {
      font-size: 26px;
      font-weight: bold;
      color: #333;
      text-align: center;
      margin-bottom: 25px;
      padding: 20px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border-radius: 15px;
    }
    
    .palm-result-image {
      text-align: center;
      margin: 25px 0;
      padding: 20px;
      background: #f8f9ff;
      border-radius: 15px;
    }
    
    .info-box {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      padding: 20px;
      border-radius: 15px;
      margin: 25px 15px;
      border-left: 5px solid #667eea;
    }
    
    .info-title {
      font-weight: bold;
      color: #333;
      margin-bottom: 12px;
      font-size: 16px;
    }
    
    .info-content {
      color: #666;
      line-height: 1.6;
    }
  `;
  const s = document.createElement('style');
  s.id = 'palm-layout-fix';
  s.textContent = css;
  document.head.appendChild(s);
}

function ensurePalmStyles(){
  ensurePalmLayoutStyles();
}

// ì†ê¸ˆ ë©”ë‰´ ë¼ë²¨ì„ í•œêµ­ì–´+ì´ëª¨ì§€ë¡œ ì„¤ì •
function ensurePalmMenuLabels(){
  const labels = {
    life:{t:'ìƒëª…ì„ ', e:'ðŸŒ±'}, head:{t:'ì§€í˜œì„ ', e:'ðŸ§ '}, heart:{t:'ê°ì •ì„ ', e:'ðŸ’–'},
    fate:{t:'ìš´ëª…ì„ ', e:'âœ¨'},  sun:{t:'íƒœì–‘ì„ ', e:'â˜€ï¸'},  marriage:{t:'ê²°í˜¼ì„ ', e:'ðŸ’•'},
    health:{t:'ê±´ê°•ì„ ', e:'âš•ï¸'}, intuition:{t:'ì§ê°ì„ ', e:'ðŸ”®'}, venus:{t:'ê¸ˆì„±ëŒ€', e:'ðŸ’«'}
  };
  $$('.palm-type-card').forEach(card=>{
    const type = card.dataset.palmType;
    const meta = labels[type];
    if (!meta) return;
    const titleEl = card.querySelector('.title, .card-title, .item-title, h3, h4') || card;
    titleEl.textContent = `${meta.t} ${meta.e}`;
  });
}

// ìˆ˜ì •ëœ renderPalmPhoto í•¨ìˆ˜ - ê° ì„œë¸Œíƒ€ìž…ì— ë§žëŠ” ì •í™•í•œ ì†ê¸ˆì„  ë Œë”ë§
function renderPalmPhoto(palmType, selectedReadingType){
  const pathString = PALM_PATHS[palmType]?.[selectedReadingType];
  const style = PALM_STYLES[palmType]?.[selectedReadingType];
  
  if (!pathString) {
    console.warn(`No path found for ${palmType} - ${selectedReadingType}`);
    return `<div class="palm-photo-wrap"><img src="${PALM_BASE_IMG}" alt="hand"/></div>`;
  }
  
  if (!pathString.trim()) {
    return `<div class="palm-photo-wrap"><img src="${PALM_BASE_IMG}" alt="hand"/></div>`;
  }
  
  const paths = pathString.split(' M').filter(p => p.trim());
  if (paths.length > 1) {
    paths[0] = 'M' + paths[0];
    for (let i = 1; i < paths.length; i++) {
      paths[i] = 'M' + paths[i];
    }
  }
  
  const lineWidth = style?.width || 5;
  const color = style?.color || '#667eea';
  const opacity = style?.opacity || 1;

  return `
    <div class="palm-photo-wrap">
      <img src="${PALM_BASE_IMG}" alt="hand"/>
      <svg class="palm-overlay" viewBox="0 0 800 1200" preserveAspectRatio="xMidYMid meet">
        ${paths.map(d => `<path d="${d}" fill="none" stroke="${color}"
             stroke-width="${lineWidth}" stroke-linecap="round" stroke-linejoin="round"
             opacity="${opacity}"/>`).join('')}
      </svg>
    </div>
  `;
}

// ì†ê¸ˆ ì„œë¸Œíƒ€ìž… ì„ íƒ í™”ë©´ (ì´ëª¨ì§€ë§Œ í‘œì‹œ)
function showPalmSubTypes(palmType) {
  ensurePalmStyles();
  
  const palmData = PALM_READINGS[palmType];
  if (!palmData) return;

  let html = '';
  html += '<div class="result-section">';
  html += `<div class="section-title-result">ðŸ–ï¸ ${palmData.name} - íƒ€ìž… ì„ íƒ</div>`;
  html += '<div class="palm-subtitle">âœ¨ ê´€ì‹¬ ìžˆëŠ” ì†ê¸ˆ ìœ í˜•ì„ ì„ íƒí•˜ì„¸ìš”</div>';
  
  html += '<div class="palm-subtypes-grid">';
  palmData.types.forEach((typeData, index) => {
    const emoji = PALM_TYPE_EMOJIS[palmType] || 'ðŸ–ï¸';
    html += `
      <div class="palm-subtype-card" data-palm-type="${palmType}" data-subtype="${typeData.type}" data-index="${index}">
        <div class="palm-subtype-emoji">${emoji}</div>
        <div class="palm-subtype-title">${typeData.type}</div>
        <div class="palm-subtype-preview">${typeData.meaning.substring(0, 60)}...</div>
      </div>
    `;
  });
  html += '</div>';
  html += '</div>';

  openSheet(palmData.name + ' íƒ€ìž… ì„ íƒ', html, { type: 'palm-selection', palmType });

  setTimeout(() => {
    $$('.palm-subtype-card').forEach(card => {
      card.addEventListener('click', () => {
        const palmType = card.dataset.palmType;
        const subType = card.dataset.subtype;
        const index = parseInt(card.dataset.index);
        showDetailedPalmReading(palmType, subType, index);
      });
    });
  }, 100);
}

// ì„ íƒëœ ì„œë¸Œíƒ€ìž…ì˜ ìƒì„¸ ê²°ê³¼ (ìƒ‰ìƒ ê°œì„ )
function showDetailedPalmReading(palmType, selectedType, typeIndex) {
  ensurePalmStyles();
  
  const palmData = PALM_READINGS[palmType];
  const selectedReading = palmData.types[typeIndex];
  
  if (!palmData || !selectedReading) return;

  const topImage = renderPalmPhoto(palmType, selectedType);

  let html = '';
  html += '<div class="result-section">';
  html +=   '<div class="section-title-result">ðŸ–ï¸ ' + palmData.name + ' í•´ì„</div>';
  html +=   '<div class="palm-result-image">' + topImage + '</div>';
  html +=   createResultCard('ðŸ”','ì†ê¸ˆ ìœ í˜•', selectedReading.type,
                             '<strong style="color: #667eea;">ì˜ë¯¸:</strong> ' + selectedReading.meaning,
                             true,'fortune-detail-card palm');
  html +=   createResultCard('ðŸ’¡','ì¡°ì–¸','ê°œì¸ ë§žì¶¤ ê°€ì´ë“œ',
                             '<strong style="color: #667eea;">ê¶Œìž¥ì‚¬í•­:</strong> ' + selectedReading.advice,false,'fortune-detail-card advice');
  html += '</div>';

  html += '<div class="info-box">';
  html +=   '<div class="info-title">ðŸ“‹ ì†ê¸ˆ ë³´ê¸° ì•ˆë‚´</div>';
  html +=   '<div class="info-content">'
         +    '<strong>ì†ê¸ˆì´ëž€:</strong> ' + palmData.description + '<br/>'
         +    'â€» ì†ê¸ˆì€ ì°¸ê³ ìš©ì´ë©°, ê°œì¸ì˜ ë…¸ë ¥ê³¼ ì„ íƒì´ ìš´ëª…ì„ ë§Œë“¤ì–´ê°‘ë‹ˆë‹¤.<br/>'
         +    'â€» ì–‘ì†ì„ ëª¨ë‘ í™•ì¸í•´ë³´ì‹œê³ , ë” ëšœë ·í•œ ìª½ì„ ì°¸ê³ í•˜ì„¸ìš”.<br/>'
         +    'â€» ì´ ì•±ì€ ì™¼ì† ê¸°ì¤€ìœ¼ë¡œ ì œìž‘ë˜ì—ˆìŠµë‹ˆë‹¤.'
         +  '</div>';
  html += '</div>';

  openSheet(palmData.name + ' í•´ì„', html, {
    type: 'palm',
    palmType,
    reading: selectedReading
  });

  showPalmInCrystal?.(palmData.name, selectedReading.type);
  reactCrystal?.(palmData.name + 'ì„ í™•ì¸í–ˆìŠµë‹ˆë‹¤! âœ¨');
  pushRecent?.({ type:'palm', palmName:palmData.name, palmType:selectedReading.type, meaning:selectedReading.meaning });
}

function showPalmReading(palmType){
  showPalmSubTypes(palmType);
}

function initializePalmReading() {
  ensurePalmStyles();
  ensurePalmMenuLabels();

  setTimeout(() => {
    const palmCards = $$('.palm-type-card');
    palmCards.forEach(card => {
      if (card.__palmBound) return;
      card.addEventListener('click', () => {
        const palmType = card.dataset.palmType;
        selectPalmType(card, palmType);
      });
      card.__palmBound = true;
    });

    const randomBtn = $('#btnRandomPalm');
    if (randomBtn && !randomBtn.__palmBound) {
      randomBtn.addEventListener('click', drawRandomPalm);
      randomBtn.__palmBound = true;
    }
  }, 100);
}

function selectPalmType(cardElement, palmType) {
$$('.palm-type-card').forEach(card => card.classList.remove('selected'));
cardElement.classList.add('selected');
showPalmReading(palmType);
}

function drawRandomPalm() {
const palmTypes = ['life', 'head', 'heart', 'fate', 'sun', 'marriage', 'health', 'intuition', 'venus'];
const randomType = palmTypes[Math.floor(Math.random() * palmTypes.length)];
const randomCard = $(`.palm-type-card[data-palm-type="${randomType}"]`);

if (randomCard) {
setTimeout(() => selectPalmType(randomCard, randomType), 300);
}
}

function showPalmInCrystal(palmName, palmType) {
const crystal = $('#mainCrystal');
if (!crystal) return;
crystal.classList.add('crystal-reveal');
crystal.innerHTML = `
<div class="crystal-card">
<div class="title">${palmName}</div>
<div class="dir">${palmType}</div>
</div>
`;
setTimeout(() => {
crystal.classList.remove('crystal-reveal');
crystal.innerHTML = 'êµ¬ìŠ¬ ì† ë¯¸ëž˜ë¥¼<br>í™•ì¸í•´ë³´ì„¸ìš”';
}, 3500);
}

// ===== íƒ€ë¡œ =====
function ensureTarotReady(){
return Array.isArray(TAROT_DETAILS) && TAROT_DETAILS.length === 22;
}

if (!window.__tarotEscBound){
document.addEventListener('keydown', (e)=>{ if (e.key === 'Escape') closeTarotModal(); });
window.__tarotEscBound = true;
}

function initializeTarot() {
if (!ensureTarotReady()) return;
const tarotCards = $$('.tarot-card-back');
tarotCards.forEach(card => {
if (card.__bound) return;
card.addEventListener('click', () => selectTarotCard(card));
card.__bound = true;
});

const randomBtn = $('#btnRandomTarot');
if (randomBtn && !randomBtn.__bound) { 
randomBtn.addEventListener('click', drawRandomTarotCard); 
randomBtn.__bound = true; 
}

const resetBtn = $('#btnResetTarot');
if (resetBtn && !resetBtn.__bound) { 
resetBtn.addEventListener('click', resetTarotCards); 
resetBtn.__bound = true; 
}

const closeBtn = $('#tarotCloseBtn');
if (closeBtn && !closeBtn.__bound) { 
closeBtn.addEventListener('click', closeTarotModal); 
closeBtn.__bound = true; 
}

const overlay = $('#tarotModalOverlay');
if (overlay && !overlay.__bound) { 
overlay.addEventListener('click', e=>{ if(e.target===overlay) closeTarotModal(); }); 
overlay.__bound = true; 
}

resetTarotCards();
}

let selectedCards = new Set();

function selectTarotCard(cardElement) {
if (!ensureTarotReady()) return;
if (cardElement.classList.contains('revealed')) return;

const randomTarotIndex = Math.floor(Math.random() * TAROT_DETAILS.length);
const isUpright = Math.random() < 0.7;
const selectedCard = TAROT_DETAILS[randomTarotIndex];

if(!selectedCard) return;

cardElement.classList.add('flipped');
setTimeout(() => {
const frontElement = document.createElement('div');
frontElement.className = 'tarot-card-front';
frontElement.innerHTML = `
<div class="card-number">${randomTarotIndex}</div>
<div class="card-icon">${CARD_ICONS[randomTarotIndex]}</div>
<div class="card-name">${selectedCard.name.split('(')[0].trim()}</div>
<div class="card-direction">${isUpright ? 'ì •ìœ„' : 'ì—­ìœ„'}</div>
`;
cardElement.appendChild(frontElement);
cardElement.classList.add('revealed');
setTimeout(()=>{ frontElement.style.opacity='1'; },100);
},300);

setTimeout(()=> showTarotModal(randomTarotIndex, isUpright), 800);
showCardInCrystal(selectedCard.name, isUpright);

pushRecent({
type:'tarot',
card:selectedCard.name,
upright:isUpright,
meaning:isUpright?selectedCard.upright:selectedCard.reversed
});
reactCrystal(`${selectedCard.name.split('(')[0].trim()}ì„ ë½‘ì•˜ìŠµë‹ˆë‹¤! âœ¨`);
}

function drawRandomTarotCard(){
const available = $$('.tarot-card-back:not(.revealed)');
if(!available.length){ reactCrystal('ëª¨ë“  ì¹´ë“œë¥¼ ì´ë¯¸ ë½‘ì•˜ìŠµë‹ˆë‹¤! ðŸŽ¯'); return; }
const el = available[Math.floor(Math.random()*available.length)];
setTimeout(()=> selectTarotCard(el), 300);
}

function resetTarotCards(){
$$('.tarot-card-back').forEach(card=>{
card.classList.remove('flipped','revealed');
card.style.transform='';
card.querySelector('.tarot-card-front')?.remove();
});
selectedCards.clear();
closeTarotModal();
reactCrystal('ìƒˆë¡œìš´ ì¹´ë“œë“¤ì´ ì¤€ë¹„ë˜ì—ˆìŠµë‹ˆë‹¤ âœ¨');
}

function showTarotModal(cardIndex, isUpright){
if (!ensureTarotReady()) return;
const idx = Math.max(0, Math.min(TAROT_DETAILS.length-1, Number(cardIndex)||0));
const card = TAROT_DETAILS[idx];
if(!card) return;

const modal = $('#tarotModalOverlay');
const content = $('#tarotModalContent');
if(!modal || !content) return;

content.innerHTML = `
<h2>${card.name}</h2>
<p style="color:#6B7280; margin-bottom:20px; line-height:1.6; font-style:italic;">${card.meaning}</p>
<div class="meaning-section upright"><h3>ðŸ”® ì •ë°©í–¥ ì˜ë¯¸</h3><p>${card.upright}</p></div>
<br>
<div class="meaning-section reversed"><h3>ðŸ”„ ì—­ë°©í–¥ ì˜ë¯¸</h3><p>${card.reversed}</p></div>
<div style="margin-top:25px; padding:15px; background:rgba(255,215,0,0.1); border-radius:10px; border-left:4px solid #ffd700;">
<h3 style="color:#ffd700; margin-bottom:10px;">${isUpright ? 'ðŸŒŸ í˜„ìž¬ ë½‘ížŒ ë°©í–¥: ì •ë°©í–¥' : 'ðŸŒ€ í˜„ìž¬ ë½‘ížŒ ë°©í–¥: ì—­ë°©í–¥'}</h3>
<p style="color:#ecf0f1; line-height:1.5;">${isUpright ? card.upright : card.reversed}</p>
</div>
`;
modal.style.display='flex';
requestAnimationFrame(()=> modal.classList.add('show'));
}

function closeTarotModal(){
const modal = $('#tarotModalOverlay');
if(!modal) return;
modal.classList.remove('show');
modal.style.display='none';
}

function showCardInCrystal(cardName, isUpright){
const crystal = $('#mainCrystal');
if(!crystal) return;
crystal.classList.add('crystal-reveal');
crystal.innerHTML = `
<div class="crystal-card">
<div class="title">${cardName.split('(')[0].trim()}</div>
<div class="dir">${isUpright ? 'ì •ìœ„' : 'ì—­ìœ„'}</div>
</div>
`;
setTimeout(()=>{
crystal.classList.remove('crystal-reveal');
crystal.innerHTML='êµ¬ìŠ¬ ì† ë¯¸ëž˜ë¥¼<br>í™•ì¸í•´ë³´ì„¸ìš”';
},3500);
}

// ===== ìš´ì„¸í’€ì´ ìƒì„± í•¨ìˆ˜ë“¤ =====
function generateLifetimeFortune(r, name = '') {
const dayGan = (r.pillars.day||'')[0] || '';
const dayEl = GAN_WUXING[dayGan] || '';

const KEYS = ['æœ¨','ç«','åœŸ','é‡‘','æ°´'];
const total = KEYS.reduce((a,k)=>a+(r.countsAll[k]||0),0);
const list = KEYS.map(k=>({k, v: r.countsAll[k]||0, p: total ? Math.round((r.countsAll[k]/total)*100) : 0}))
.sort((a,b)=>b.v-a.v);
const strongest = list[0];

const ssMonth = krShiShen(r.tenGods.m || '');

const lifetimeTexts = {
'æœ¨': `${name ? name+'ë‹˜ì€' : 'ì´ ë¶„ì€'} ì„±ìž¥ê³¼ ë°œì „ì„ ì¶”êµ¬í•˜ëŠ” ì¸ìƒì„ ê±·ê²Œ ë©ë‹ˆë‹¤. ì–´ë ¤ì„œë¶€í„° í•™ìŠµëŠ¥ë ¥ì´ ë›°ì–´ë‚˜ë©°, ìƒˆë¡œìš´ ê²ƒì„ ë°°ìš°ê³  í¡ìˆ˜í•˜ëŠ” ì†ë„ê°€ ë¹ ë¦…ë‹ˆë‹¤. ì¸ìƒ ì „ë°˜ì— ê±¸ì³ ëŠìž„ì—†ëŠ” ìžê¸°ê³„ë°œê³¼ ì„±ìž¥ì˜ ê¸°íšŒê°€ ì£¼ì–´ì§€ë©°, íŠ¹ížˆ êµìœ¡, ê¸°íš, ì°½ì˜ì ì¸ ë¶„ì•¼ì—ì„œ ë‘ê°ì„ ë‚˜íƒ€ë‚¼ ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ì‚¬ëžŒë“¤ê³¼ì˜ ë„¤íŠ¸ì›Œí‚¹ì„ í†µí•´ ê¸°íšŒë¥¼ í™•ìž¥í•´ë‚˜ê°€ëŠ” ì„±í–¥ì´ ê°•í•˜ë©°, ì¤‘ë…„ ì´í›„ì—ëŠ” í›„ë°°ë‚˜ ì œìžë¥¼ ì–‘ì„±í•˜ëŠ” ì—­í• ì„ ë§¡ê²Œ ë  ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤. ë‹¤ë§Œ ë„ˆë¬´ ë§Žì€ ì¼ì„ ë²Œì—¬ë†“ì•„ ë§ˆë¬´ë¦¬ê°€ ë¶€ì¡±í•  ìˆ˜ ìžˆìœ¼ë‹ˆ, ìš°ì„ ìˆœìœ„ë¥¼ ì •í•˜ê³  ì§‘ì¤‘í•˜ëŠ” ê²ƒì´ ì¤‘ìš”í•©ë‹ˆë‹¤. ì „ì²´ì ìœ¼ë¡œ ìƒìŠ¹í•˜ëŠ” ì¸ìƒ ê³¡ì„ ì„ ê·¸ë¦¬ë©°, ë…¸í›„ì—ë„ í™œë°œí•œ í™œë™ì„ ì´ì–´ê°ˆ ê²ƒìž…ë‹ˆë‹¤.`,

'ç«': `${name ? name+'ë‹˜ì˜' : 'ì´ ë¶„ì˜'} ì¸ìƒì€ ì—´ì •ê³¼ ì—ë„ˆì§€ë¡œ ê°€ë“í•œ ì—­ë™ì ì¸ ì—¬ì •ì´ ë  ê²ƒìž…ë‹ˆë‹¤. íƒ€ê³ ë‚œ ë¦¬ë”ì‹­ê³¼ í‘œí˜„ë ¥ìœ¼ë¡œ ë§Žì€ ì‚¬ëžŒë“¤ì—ê²Œ ì˜í–¥ì„ ë¯¸ì¹˜ë©°, íŠ¹ížˆ ì Šì€ ì‹œì ˆë¶€í„° ì£¼ëª©ë°›ëŠ” ê²½ìš°ê°€ ë§ŽìŠµë‹ˆë‹¤. ì˜ˆìˆ , ì—”í„°í…Œì¸ë¨¼íŠ¸, ì„¸ì¼ì¦ˆ, í™ë³´ ë¶„ì•¼ì—ì„œ íŠ¹ë³„í•œ ìž¬ëŠ¥ì„ ë°œíœ˜í•  ìˆ˜ ìžˆìœ¼ë©°, ì‚¬ëžŒë“¤ ì•žì— ì„œëŠ” ê²ƒì„ ë‘ë ¤ì›Œí•˜ì§€ ì•ŠìŠµë‹ˆë‹¤. ì¤‘ë…„ê¸°ì—ëŠ” ìžì‹ ë§Œì˜ ë…íŠ¹í•œ ìŠ¤íƒ€ì¼ë¡œ ì„±ê³µì„ ê±°ë‘˜ ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤. í•˜ì§€ë§Œ ê°ì •ì˜ ê¸°ë³µì´ í´ ìˆ˜ ìžˆê³ , ì„±ê¸‰í•œ íŒë‹¨ìœ¼ë¡œ ì¸í•œ ì‹¤ìˆ˜ë¥¼ ì¡°ì‹¬í•´ì•¼ í•©ë‹ˆë‹¤. ê¾¸ì¤€í•œ ì¸ë‚´ì™€ ì ˆì œë ¥ì„ ê¸°ë¥´ë©´ ë”ìš± ì•ˆì •ëœ ì„±ê³µì„ ì´ë£° ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ì¸ìƒ ì „ë°˜ì ìœ¼ë¡œ í™”ë ¤í•˜ê³  ì—­ë™ì ì¸ ëª¨ìŠµì„ ë³´ì¼ ê²ƒìž…ë‹ˆë‹¤.`,

'åœŸ': `${name ? name+'ë‹˜ì€' : 'ì´ ë¶„ì€'} ì•ˆì •ê³¼ ì‹ ë¢°ë¥¼ ë°”íƒ•ìœ¼ë¡œ í•œ ê²¬ì‹¤í•œ ì¸ìƒì„ ì‚´ê²Œ ë©ë‹ˆë‹¤. ê¸‰í•˜ê²Œ ì„œë‘ë¥´ê¸°ë³´ë‹¤ëŠ” ì°¨ê·¼ì°¨ê·¼ ê¸°ë°˜ì„ ë‹¤ì ¸ë‚˜ê°€ëŠ” ì„±í–¥ìœ¼ë¡œ, ì‹œê°„ì´ ê°ˆìˆ˜ë¡ ì£¼ë³€ì˜ ì‹ ë¢°ë¥¼ ì–»ê²Œ ë©ë‹ˆë‹¤. ë¶€ë™ì‚°, ê¸ˆìœµ, ìš´ì˜ê´€ë¦¬, ì„œë¹„ìŠ¤ì—… ë“±ì—ì„œ ìž¥ê¸°ì ì¸ ì„±ê³µì„ ê±°ë‘˜ ìˆ˜ ìžˆìœ¼ë©°, íŠ¹ížˆ 40ëŒ€ ì´í›„ì—ëŠ” ì•ˆì •ëœ ê¸°ë°˜ ìœ„ì—ì„œ ë”í° ì„±ê³¼ë¥¼ ì´ë£° ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ê°€ì¡±ê³¼ ì¡°ì§ì—ì„œ ì¤‘ì‹¬ì ì¸ ì—­í• ì„ ë§¡ê²Œ ë˜ë©°, ë§Žì€ ì‚¬ëžŒë“¤ì´ ì˜ì§€í•˜ëŠ” ì¡´ìž¬ê°€ ë©ë‹ˆë‹¤. ë‹¤ë§Œ ë³€í™”ì— ëŒ€í•œ ì ì‘ì´ ë‹¤ì†Œ ëŠë¦´ ìˆ˜ ìžˆìœ¼ë‹ˆ, ë•Œë¡œëŠ” ê³¼ê°í•œ ë„ì „ë„ í•„ìš”í•©ë‹ˆë‹¤. ê¾¸ì¤€í•¨ê³¼ ì„±ì‹¤í•¨ì´ ê°€ìž¥ í° ë¬´ê¸°ë¡œ, ë§ë…„ì—ëŠ” í’ì¡±í•˜ê³  ì•ˆì •ëœ ì‚¶ì„ ëˆ„ë¦´ ê²ƒìž…ë‹ˆë‹¤.`,

'é‡‘': `${name ? name+'ë‹˜ì˜' : 'ì´ ë¶„ì˜'} ì¸ìƒì€ ì •í™•ì„±ê³¼ ì›ì¹™ì„ ì¤‘ì‹œí•˜ëŠ” ì²´ê³„ì ì¸ ì—¬ì •ì´ ë  ê²ƒìž…ë‹ˆë‹¤. ë¶„ì„ì  ì‚¬ê³ ì™€ ë…¼ë¦¬ì  íŒë‹¨ë ¥ì´ ë›°ì–´ë‚˜ ì „ë¬¸ì§, ê¸ˆìœµ, ë²•ë¬´, ê¸°ìˆ  ë¶„ì•¼ì—ì„œ ì¸ì •ë°›ì„ ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤. ì Šì€ ì‹œì ˆì—ëŠ” ë‹¤ì†Œ ê²½ì§ë˜ì–´ ë³´ì¼ ìˆ˜ ìžˆì§€ë§Œ, ê²½í—˜ì´ ìŒ“ì´ë©´ì„œ ìžì‹ ë§Œì˜ í™•ê³ í•œ ì „ë¬¸ì„±ì„ êµ¬ì¶•í•˜ê²Œ ë©ë‹ˆë‹¤. ìž¬ì •ê´€ë¦¬ ëŠ¥ë ¥ì´ ìš°ìˆ˜í•˜ì—¬ ì¤‘ë…„ ì´í›„ì—ëŠ” ê²½ì œì ìœ¼ë¡œ ì•ˆì •ëœ ìƒí™œì„ í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ì™„ë²½ì£¼ì˜ ì„±í–¥ì´ ê°•í•´ ë•Œë¡œëŠ” ìŠ¤íŠ¸ë ˆìŠ¤ë¥¼ ë°›ì„ ìˆ˜ ìžˆìœ¼ë‹ˆ, ìœ ì—°ì„±ê³¼ í¬ìš©ë ¥ì„ ê¸°ë¥´ëŠ” ê²ƒì´ ì¤‘ìš”í•©ë‹ˆë‹¤. í•œë²ˆ ë§ºì€ ì¸ì—°ì€ ì˜¤ëž˜ê°€ëŠ” ì§„ì •í•œ ê´€ê³„ë¥¼ ìœ ì§€í•˜ë©°, í’ˆê²© ìžˆëŠ” ë…¸í›„ë¥¼ ë³´ë‚¼ ê²ƒìž…ë‹ˆë‹¤.`,

'æ°´': `${name ? name+'ë‹˜ì€' : 'ì´ ë¶„ì€'} ìœ ì—°í•¨ê³¼ ì ì‘ë ¥ìœ¼ë¡œ ë‹¤ì–‘í•œ ê²½í—˜ì„ í•˜ëŠ” í’ì„±í•œ ì¸ìƒì„ ì‚´ê²Œ ë©ë‹ˆë‹¤. ë›°ì–´ë‚œ ì†Œí†µëŠ¥ë ¥ê³¼ í•™ìŠµë ¥ìœ¼ë¡œ ì—¬ëŸ¬ ë¶„ì•¼ë¥¼ ë„˜ë‚˜ë“¤ë©° í™œë™í•  ìˆ˜ ìžˆìœ¼ë©°, íŠ¹ížˆ êµìœ¡, ì—°êµ¬, ë¯¸ë””ì–´, ìƒë‹´ ë¶„ì•¼ì—ì„œ ë‘ê°ì„ ë‚˜íƒ€ë‚¼ ìˆ˜ ìžˆìŠµë‹ˆë‹¤. ì§ê´€ë ¥ì´ ë›°ì–´ë‚˜ íŠ¸ë Œë“œë¥¼ ë¹ ë¥´ê²Œ íŒŒì•…í•˜ê³ , ë³€í™”í•˜ëŠ” í™˜ê²½ì— ìž˜ ì ì‘í•©ë‹ˆë‹¤. êµ­ì œì ì¸ í™œë™ì´ë‚˜ ì›ê±°ë¦¬ ì´ì£¼ì˜ ê¸°íšŒê°€ ìžˆì„ ìˆ˜ ìžˆìœ¼ë©°, ë‹¤ì–‘í•œ ì¸ë§¥ì„ í†µí•´ ê¸°íšŒë¥¼ í™•ìž¥í•´ë‚˜ê°‘ë‹ˆë‹¤. ë‹¤ë§Œ í•œ ê³³ì— ì˜¤ëž˜ ë¨¸ë¬´ë¥´ì§€ ëª»í•˜ëŠ” ì„±í–¥ì´ ìžˆì–´, ì¤‘ìš”í•œ ê²°ì •ì—ì„œëŠ” ì‹ ì¤‘í•¨ì´ í•„ìš”í•©ë‹ˆë‹¤. ê¹Šì´ ìžˆëŠ” ì „ë¬¸ì„±ì„ ê¸°ë¥´ë©´ ë”ìš± í° ì„±ì·¨ë¥¼ ì´ë£° ìˆ˜ ìžˆìœ¼ë©°, ì§€í˜œë¡œìš´ ë§Œë…„ì„ ë³´ë‚¼ ê²ƒìž…ë‹ˆë‹¤.`
};

let result = lifetimeTexts[dayEl] || `${name ? name+'ë‹˜ì˜' : 'ì´ ë¶„ì˜'} ì¸ìƒì€ ë…íŠ¹í•œ ê°œì„±ê³¼ íŠ¹ë³„í•œ ìž¬ëŠ¥ìœ¼ë¡œ íŠ¹ë³„í•œ ì—¬ì •ì„ ê±¸ì–´ê°€ê²Œ ë  ê²ƒìž…ë‹ˆë‹¤.`;

if (ssMonth.includes('ì •ê´€') || ssMonth.includes('íŽ¸ê´€')) {
result += ' íŠ¹ížˆ ë¦¬ë”ì‹­ê³¼ ê´€ë¦¬ëŠ¥ë ¥ì´ ë›°ì–´ë‚˜ ì¡°ì§ì—ì„œ ì¤‘ìš”í•œ ì—­í• ì„ ë§¡ê²Œ ë  ê²ƒìž…ë‹ˆë‹¤.';
} else if (ssMonth.includes('ì •ìž¬') || ssMonth.includes('íŽ¸ìž¬')) {
result += ' ìž¬ë¬¼ìš´ì´ ì¢‹ì•„ ì‚¬ì—…ì´ë‚˜ íˆ¬ìžì—ì„œ ì„±ê³¼ë¥¼ ê±°ë‘˜ ê°€ëŠ¥ì„±ì´ ë†’ìŠµë‹ˆë‹¤.';
} else if (ssMonth.includes('ì‹ì‹ ') || ssMonth.includes('ìƒê´€')) {
result += ' ì°½ì˜ì  ìž¬ëŠ¥ê³¼ í‘œí˜„ë ¥ì´ ë›°ì–´ë‚˜ ì˜ˆìˆ ì´ë‚˜ ì½˜í…ì¸  ë¶„ì•¼ì—ì„œ ì„±ê³µí•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤.';
}

return result;
}

function generateDaeunAnalysis(r, name = '') {
const dayGan = (r.pillars.day||'')[0] || '';
const dayEl = GAN_WUXING[dayGan] || '';
const birthYear = r.solar ? r.solar.getYear() : 2000;
const currentYear = new Date().getFullYear();
const age = currentYear - birthYear;

const KEYS = ['æœ¨','ç«','åœŸ','é‡‘','æ°´'];
const total = KEYS.reduce((a,k)=>a+(r.countsAll[k]||0),0);
const list = KEYS.map(k=>({k, v: r.countsAll[k]||0, p: total ? Math.round((r.countsAll[k]/total)*100) : 0}))
.sort((a,b)=>b.v-a.v);

let analysis = `${name ? name+'ë‹˜ì˜' : 'ì´ ë¶„ì˜'} ëŒ€ìš´ íë¦„ì„ ì‚´íŽ´ë³´ë©´, `;

if (age < 10) {
analysis += 'í˜„ìž¬ ê¸°ì´ˆ í˜•ì„±ê¸°ë¡œ ì„±ê²©ê³¼ ê¸°ë³¸ ì„±í–¥ì´ ìžë¦¬ìž¡ëŠ” ì¤‘ìš”í•œ ì‹œê¸°ìž…ë‹ˆë‹¤. ';
} else if (age < 20) {
analysis += 'í˜„ìž¬ ì„±ìž¥ê¸°ë¡œ í•™ìŠµê³¼ ì¸ê²© í˜•ì„±ì˜ ê²°ì •ì  ì‹œê¸°ì— ìžˆìŠµë‹ˆë‹¤. ';
} else if (age < 30) {
analysis += 'í˜„ìž¬ ë„ì•½ê¸°ë¡œ ì‚¬íšŒ ì§„ì¶œê³¼ ìžì•„ ì‹¤í˜„ì´ ì‹œìž‘ë˜ëŠ” ì‹œê¸°ìž…ë‹ˆë‹¤. ';
} else if (age < 40) {
analysis += 'í˜„ìž¬ ë°œì „ê¸°ë¡œ ê²½ë ¥ ë°œì „ê³¼ ê¸°ë°˜ êµ¬ì¶•ì˜ í•µì‹¬ ì‹œê¸°ìž…ë‹ˆë‹¤. ';
} else if (age < 50) {
analysis += 'í˜„ìž¬ ì„±ìˆ™ê¸°ë¡œ ì•ˆì •ê³¼ ì„±ì·¨ë¥¼ ì´ë£¨ëŠ” ì ˆì •ì˜ ì‹œê¸°ìž…ë‹ˆë‹¤. ';
} else if (age < 60) {
analysis += 'í˜„ìž¬ ì™„ì„±ê¸°ë¡œ ê²½í—˜ê³¼ ì§€í˜œê°€ ì ˆì •ì— ë‹¬í•˜ëŠ” ì‹œê¸°ìž…ë‹ˆë‹¤. ';
} else {
analysis += 'í˜„ìž¬ ì—¬ìœ ê¸°ë¡œ í›„ë°° ì–‘ì„±ê³¼ ìƒˆë¡œìš´ ì‹œìž‘ì„ ì¤€ë¹„í•˜ëŠ” ì‹œê¸°ìž…ë‹ˆë‹¤. ';
}

const strongest = list[0];
const weakest = list[list.length-1];

if (strongest.p - weakest.p > 30) {
analysis += `íƒ€ê³ ë‚œ ${WUXING_INFO[strongest.k].ko}ì˜ ê¸°ìš´ì´ ê°•í•´ ì¶”ì§„ë ¥ì´ ë›°ì–´ë‚˜ì§€ë§Œ, ${WUXING_INFO[weakest.k].ko}ë¥¼ ë³´ì™„í•˜ëŠ” ì‹œê¸°ì—ëŠ” ì‹ ì¤‘í•¨ì´ í•„ìš”í•©ë‹ˆë‹¤. `;
} else {
analysis += `ì˜¤í–‰ì˜ ê· í˜•ì´ ë¹„êµì  ìž˜ ë§žì•„ ì „ ìƒì• ì— ê±¸ì³ ì•ˆì •ëœ ìš´ì„¸ë¥¼ ë³´ìž…ë‹ˆë‹¤. `;
}

if (dayEl === 'æœ¨' || dayEl === 'æ°´') {
analysis += `íŠ¹ížˆ 40ëŒ€ ì´í›„ì— í° ì„±ì·¨ë¥¼ ì´ë£° ê°€ëŠ¥ì„±ì´ ë†’ìœ¼ë©°, ì¸ìƒ í›„ë°˜ê¸°ë¡œ ê°ˆìˆ˜ë¡ ë”ìš± ë¹›ì´ ë‚©ë‹ˆë‹¤. ì§€ì†ì ì¸ í•™ìŠµê³¼ ì„±ìž¥ìœ¼ë¡œ ë§Œë…„ì—ë„ í™œë°œí•œ í™œë™ì„ ì´ì–´ê°ˆ ê²ƒìž…ë‹ˆë‹¤.`;
} else if (dayEl === 'ç«') {
analysis += `ì Šì€ ì‹œì ˆì˜ í™œë°œí•œ ì—ë„ˆì§€ë¥¼ ì¤‘ë…„ê¸°ì— ì•ˆì •ì ìœ¼ë¡œ í™œìš©í•˜ë©´ ì§€ì†ì ì¸ ì„±ê³µì´ ê°€ëŠ¥í•©ë‹ˆë‹¤. ê°ì • ì¡°ì ˆì„ í†µí•´ ë”ìš± ì„±ìˆ™í•œ ë¦¬ë”ì‹­ì„ ë°œíœ˜í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤.`;
} else if (dayEl === 'åœŸ' || dayEl === 'é‡‘') {
analysis += `ê¾¸ì¤€í•œ ë…¸ë ¥ì´ ì¤‘ë…„ê¸° ì´í›„ í° ê²°ì‹¤ë¡œ ë‚˜íƒ€ë‚˜ë©°, ì•ˆì •ëœ ê¸°ë°˜ ìœ„ì—ì„œ ë…¸í›„ì—ë„ í’ì¡±í•œ ìƒí™œì„ ìœ ì§€í•  ìˆ˜ ìžˆìŠµë‹ˆë‹¤.`;
}

return analysis;
}

function generateDaeunTiming(r, name = '') {
const birthYear = r.solar ? r.solar.getYear() : 2000;
const currentYear = new Date().getFullYear();
const age = currentYear - birthYear;

let timing = '';

if (age < 25) {
timing = `í˜„ìž¬ëŠ” ê¸°ì´ˆë¥¼ ë‹¤ì§€ëŠ” ì¤‘ìš”í•œ ì‹œê¸°ìž…ë‹ˆë‹¤. 25-35ì„¸ ì‚¬ì´ì— í° ì „í™˜ì ì´ ì˜¬ ê²ƒì´ë©°, ì´ë•Œì˜ ì„ íƒì´ í–¥í›„ 10ë…„ì„ ì¢Œìš°í•©ë‹ˆë‹¤.`;
} else if (age < 35) {
timing = `ì§€ê¸ˆì´ ì¸ìƒì˜ ì¤‘ìš”í•œ ì „í™˜ê¸°ìž…ë‹ˆë‹¤. 35-45ì„¸ ì‚¬ì´ì— ìµœê³ ì˜ ì„±ì·¨ê¸°ê°€ ì˜¬ ê²ƒì´ë‹ˆ í˜„ìž¬ì˜ ë…¸ë ¥ì„ ë©ˆì¶”ì§€ ë§ˆì„¸ìš”.`;
} else if (age < 45) {
timing = `í˜„ìž¬ ì¸ìƒì˜ ì ˆì •ê¸°ì— ìžˆìŠµë‹ˆë‹¤. 45-55ì„¸ ì‚¬ì´ì—ëŠ” ì•ˆì •ê³¼ ì„±ìˆ™ì˜ ì‹œê¸°ê°€ ì˜¬ ê²ƒì´ë©°, í›„ë°° ì–‘ì„±ì—ë„ íž˜ì¨ë³´ì„¸ìš”.`;
} else if (age < 55) {
timing = `ì„±ìˆ™í•œ ì§€í˜œê°€ ë¹›ë‚˜ëŠ” ì‹œê¸°ìž…ë‹ˆë‹¤. 55-65ì„¸ ì‚¬ì´ì—ëŠ” ìƒˆë¡œìš´ ë„ì „ì´ë‚˜ ì œ2ì˜ ì¸ìƒì„ ì„¤ê³„í•  ì¢‹ì€ ì‹œê¸°ìž…ë‹ˆë‹¤.`;
} else {
timing = `ì¸ìƒì˜ ì—¬ìœ ì™€ ê¹Šì´ë¥¼ ë§Œë½í•  ì‹œê¸°ìž…ë‹ˆë‹¤. ê²½í—˜ê³¼ ì§€í˜œë¥¼ ë‚˜ëˆ„ë©° ì˜ë¯¸ ìžˆëŠ” ì‹œê°„ì„ ë³´ë‚´ì„¸ìš”.`;
}

return timing;
}

function generateCautionPeriods(r, name = '') {
const dayGan = (r.pillars.day||'')[0] || '';
const dayEl = GAN_WUXING[dayGan] || '';

let caution = '';

const cautionByElement = {
'æœ¨': 'ê¸ˆ(é‡‘)ì˜ í•´(ì›ìˆ­ì´ë , ë‹­ë  í•´)ì—ëŠ” ê³¼ë„í•œ ìŠ¤íŠ¸ë ˆìŠ¤ì™€ ê±´ê°• ë¬¸ì œë¥¼ ì£¼ì˜í•˜ì„¸ìš”.',
'ç«': 'ë¬¼(æ°´)ì˜ í•´(ì¥ë , ë¼ì§€ë  í•´)ì—ëŠ” ê°ì • ê¸°ë³µê³¼ ëŒ€ì¸ê´€ê³„ ê°ˆë“±ì„ ì¡°ì‹¬í•˜ì„¸ìš”.',
'åœŸ': 'ëª©(æœ¨)ì˜ í•´(í˜¸ëž‘ì´ë , í† ë¼ë  í•´)ì—ëŠ” ìš°ìœ ë¶€ë‹¨í•œ ê²°ì •ê³¼ ìž¬ì • ê´€ë¦¬ë¥¼ ì£¼ì˜í•˜ì„¸ìš”.',
'é‡‘': 'í™”(ç«)ì˜ í•´(ë§ë , ë±€ë  í•´)ì—ëŠ” ì„±ê¸‰í•œ íŒë‹¨ê³¼ íˆ¬ìž ì†ì‹¤ì„ ê²½ê³„í•˜ì„¸ìš”.',
'æ°´': 'í† (åœŸ)ì˜ í•´(ìš©ë , ê°œë , ì–‘ë , ì†Œë  í•´)ì—ëŠ” ë‹µë‹µí•¨ê³¼ ì •ì²´ë¥¼ ì¸ë‚´ë¡œ ê·¹ë³µí•˜ì„¸ìš”.'
};

caution += cautionByElement[dayEl] || 'ë³€í™”ì˜ í•´ì—ëŠ” ì‹ ì¤‘í•œ íŒë‹¨ì´ í•„ìš”í•©ë‹ˆë‹¤.';
caution += ' ë˜í•œ ë³¸ëª…ë…„ê³¼ ì¶©(æ²–)ì´ ë˜ëŠ” í•´ì—ëŠ” í° ë³€í™”ë‚˜ ì´ë™ì´ ìžˆì„ ìˆ˜ ìžˆìœ¼ë‹ˆ ë¯¸ë¦¬ ì¤€ë¹„í•˜ì„¸ìš”.';

return caution;
}

function generateAdvice(r, name = '') {
const dayGan = (r.pillars.day||'')[0] || '';
const dayEl = GAN_WUXING[dayGan] || '';

const KEYS = ['æœ¨','ç«','åœŸ','é‡‘','æ°´'];
const total = KEYS.reduce((a,k)=>a+(r.countsAll[k]||0),0);
const list = KEYS.map(k=>({k, v: r.countsAll[k]||0, p: total ? Math.round((r.countsAll[k]/total)*100) : 0}))
.sort((a,b)=>b.v-a.v);
const weakest = list[list.length-1];
const weakInfo = WUXING_INFO[weakest.k] || {};

const ssMonth = krShiShen(r.tenGods.m || '');

let advice = `${name ? name+'ë‹˜ê»˜' : 'ì´ ë¶„ê»˜'} ë“œë¦¬ëŠ” ì¸ìƒ ì¡°ì–¸ìž…ë‹ˆë‹¤. `;

const basicAdvice = {
'æœ¨': 'ì„±ìž¥ ì§€í–¥ì ì¸ ì„±ê²©ì„ ì‚´ë ¤ ì§€ì†ì ì¸ í•™ìŠµê³¼ ë„¤íŠ¸ì›Œí‚¹ì— íˆ¬ìží•˜ì„¸ìš”. ë‹¤ë§Œ ë„ˆë¬´ ë§Žì€ ì¼ì„ ë²Œì´ì§€ ë§ê³  ìš°ì„ ìˆœìœ„ë¥¼ ì •í•´ ì°¨ê·¼ì°¨ê·¼ ì§„í–‰í•˜ëŠ” ê²ƒì´ ì¤‘ìš”í•©ë‹ˆë‹¤.',
'ç«': 'ë›°ì–´ë‚œ í‘œí˜„ë ¥ê³¼ ì—´ì •ì„ í™œìš©í•˜ë˜, ê°ì • ì¡°ì ˆê³¼ ì¸ë‚´ì‹¬ì„ ê¸°ë¥´ëŠ” ê²ƒì´ í•„ìš”í•©ë‹ˆë‹¤. ê¸‰í•œ ì„±ê²©ì„ ë‹¤ìŠ¤ë¦¬ê³  ìž¥ê¸°ì ì¸ ê´€ì ì—ì„œ ê³„íšì„ ì„¸ìš°ì„¸ìš”.',
'åœŸ': 'ì•ˆì •ê°ê³¼ ì‹ ë¢°ì„±ì´ ê°€ìž¥ í° ë¬´ê¸°ìž…ë‹ˆë‹¤. ê¾¸ì¤€í•¨ì„ ìœ ì§€í•˜ë˜, ë•Œë¡œëŠ” ë³€í™”ì— ëŒ€í•œ ìœ ì—°ì„±ë„ í•„ìš”í•©ë‹ˆë‹¤. ìƒˆë¡œìš´ ì‹œë„ë¥¼ ë‘ë ¤ì›Œí•˜ì§€ ë§ˆì„¸ìš”.',
'é‡‘': 'ì •í™•ì„±ê³¼ ì›ì¹™ì„ ì¤‘ì‹œí•˜ëŠ” ì„±í–¥ì„ ì‚´ë ¤ ì „ë¬¸ì„±ì„ ê¸°ë¥´ì„¸ìš”. ì™„ë²½ì£¼ì˜ ì„±í–¥ì´ ê°•í•  ìˆ˜ ìžˆìœ¼ë‹ˆ ì ë‹¹í•œ íƒ€í˜‘ì ì„ ì°¾ëŠ” ì§€í˜œë„ í•„ìš”í•©ë‹ˆë‹¤.',
'æ°´': 'ë›°ì–´ë‚œ ì ì‘ë ¥ê³¼ ì†Œí†µëŠ¥ë ¥ì„ í™œìš©í•˜ë˜, í•œ ë¶„ì•¼ì—ì„œì˜ ê¹Šì´ë„ ì¶”êµ¬í•˜ì„¸ìš”. ë³€í™”ë¥¼ ë‘ë ¤ì›Œí•˜ì§€ ë§ê³  ìƒˆë¡œìš´ ê¸°íšŒì— ì—´ë¦° ë§ˆìŒì„ ê°€ì§€ì„¸ìš”.'
};

advice += basicAdvice[dayEl] || 'ìžì‹ ì˜ ìž¥ì ì„ ì‚´ë¦¬ë˜ ë‹¨ì ì„ ë³´ì™„í•˜ëŠ” ë…¸ë ¥ì´ í•„ìš”í•©ë‹ˆë‹¤.';
advice += ` íŠ¹ížˆ ${weakInfo.ko} ê¸°ìš´ì„ ${weakInfo.boost.split(',')[0]}ë¡œ ë³´ì™„í•˜ë©´ ë”ìš± ê· í˜•ìž¡ížŒ ì‚¶ì„ ì‚´ ìˆ˜ ìžˆìŠµë‹ˆë‹¤.`;

return advice;
}

function buildEnhancedSajuResult(r, name = '') {
const KEYS = ['æœ¨','ç«','åœŸ','é‡‘','æ°´'];
const total = KEYS.reduce((a,k)=>a+(r.countsAll[k]||0),0);
const list = KEYS.map(k=>({
k, 
v: r.countsAll[k]||0, 
p: total ? Math.round((r.countsAll[k]/total)*100) : 0
})).sort((a,b)=>b.v-a.v);

const strongest = list[0];
const weakest = list[list.length-1];
const strongInfo = WUXING_INFO[strongest.k];
const weakInfo = WUXING_INFO[weakest.k];

const dayGan = (r.pillars.day||'')[0] || '';
const dayEl = GAN_WUXING[dayGan] || '';
const dayInfo = WUXING_INFO[dayEl] || {};

const ssMonthKR = krShiShen(r.tenGods.m || '');
const ssKey = Object.keys(SHISHEN_DESC).find(k => ssMonthKR.includes(k));
const ssDesc = ssKey ? SHISHEN_DESC[ssKey] : 'ì›”ê°„ì€ ì‚¬íšŒì  ì—­í• Â·ì§ì—…ì„±ì˜ ë¼ˆëŒ€ë¥¼ ë³´ì—¬ì¤ë‹ˆë‹¤.';

const nameTitle = name ? `<b>${name}</b>ë‹˜ì˜ ` : '';

const lifetimeFortune = generateLifetimeFortune(r, name);
const daeunAnalysis = generateDaeunAnalysis(r, name);
const daeunTiming = generateDaeunTiming(r, name);
const cautionPeriods = generateCautionPeriods(r, name);
const advice = generateAdvice(r, name);

let html = `
<div class="result-section">
<div class="section-title-result">ðŸ“Š ${nameTitle}ì‚¬ì£¼ ê¸°ë³¸ êµ¬ì¡°</div>
${createPillarsGrid(r.pillars)}
</div>

<div class="result-section">
<div class="section-title-result">ðŸŽ¯ ${nameTitle}í•µì‹¬ í•´ì„</div>
${createResultCard('ðŸŒ±', 'ë³´ì™„í•  ì˜¤í–‰', `${weakInfo.ko}(${weakest.k}) ${weakest.p}%`, 
`<strong>ì„¤ëª…:</strong> ì˜¤í–‰ì˜ ê· í˜•ì—ì„œ ê°€ìž¥ ë‚®ì€ ì¶•ìž…ë‹ˆë‹¤. ì´ ìš”ì†Œë¥¼ ë³´ì™„í•˜ë©´ ì „ë°˜ì ì¸ íë¦„ì´ ì•ˆì •ë©ë‹ˆë‹¤.<br/>
<strong>ë¶€ì¡± íŠ¹ì„±:</strong> ${weakInfo.trait}<br/>
<strong>ë³´ì™„ íŒ:</strong> ${weakInfo.boost}`, true, 'fortune-detail-card palm')}

${createResultCard('ðŸ·ï¸', 'ì›”ê°„ ì‹­ì‹ ', ssMonthKR || '-', 
`<strong>ì„¤ëª…:</strong> ì›”ê°„ì€ ì‚¬íšŒì  ì—­í• Â·ì§ì—…ì„±ì˜ ë¼ˆëŒ€ë¥¼ ëœ»í•©ë‹ˆë‹¤. ì‹­ì‹ ì€ ì¼ê°„ê³¼ì˜ ê´€ê³„ë¡œ ìž¬ëŠ¥/ê³¼ì œ ìœ í˜•ì„ ë³´ì—¬ì¤ë‹ˆë‹¤.<br/>
<strong>í•´ì„:</strong> ${ssDesc}`)}

${createResultCard('ðŸ”¥', 'ê°•í•œ ì˜¤í–‰', `${strongInfo.ko}(${strongest.k}) ${strongest.p}%`, 
`<strong>ìž¥ì :</strong> ${strongInfo.trait}<br/>
<strong>ì£¼ì˜:</strong> ì´ ìš”ì†Œê°€ ê³¼í•  ë•ŒëŠ” ê· í˜•ì„ ìœ„í•´ ë‹¤ë¥¸ ì˜¤í–‰ì„ ë³´ì™„í•˜ì„¸ìš”.`)}
</div>

<div class="result-section">
<div class="section-title-result">ðŸ“ˆ ${nameTitle}ì˜¤í–‰ ë¶„í¬</div>
${createElementChart(r.countsAll)}
</div>

<div class="result-section">
<div class="section-title-result">ðŸŒŸ ${nameTitle}ìƒì„¸ ìš´ì„¸í’€ì´</div>

${createResultCard('ðŸ“œ', 'í‰ìƒìš´', 'ì¸ìƒ ì „ì²´ íë¦„', lifetimeFortune, false, 'fortune-detail-card lifetime')}

${createResultCard('ðŸ“Š', 'ëŒ€ìš´ë¶„ì„', '10ë…„ ë‹¨ìœ„ íë¦„', daeunAnalysis, false, 'fortune-detail-card daeun')}

${createResultCard('â°', 'ëŒ€ìš´ì‹œê¸°', 'í˜„ìž¬ì™€ í–¥í›„ ì‹œê¸°', daeunTiming, false, 'fortune-detail-card timing')}

${createResultCard('âš ï¸', 'ì¡°ì‹¬í• ì‹œê¸°', 'ì£¼ì˜ê°€ í•„ìš”í•œ ë•Œ', cautionPeriods, false, 'fortune-detail-card caution')}

${createResultCard('ðŸ’¡', 'ì¸ìƒì¡°ì–¸', 'ì‹¤ìš©ì  ê°€ì´ë“œ', advice, false, 'fortune-detail-card advice')}
</div>

<div class="info-box">
<div class="info-title">ðŸ“‹ ìƒì„¸ ì •ë³´</div>
<div class="info-content">
<strong>ë‹¬ë ¥:</strong> ${r.calMode==='lunar'?'ìŒë ¥':'ì–‘ë ¥'}${r.calMode==='lunar' ? ` / ìœ¤ë‹¬: ${r.isLeap?'ì˜ˆ':'ì•„ë‹ˆì˜¤'}`:''}<br/>
<strong>ì‹­ì‹ :</strong> ë…„:${krShiShen(r.tenGods.y)||'-'} / ì›”:${krShiShen(r.tenGods.m)||'-'} / ì‹œ:${krShiShen(r.tenGods.t)||'-'}<br/>
â€» ìˆ˜ì¹˜ëŠ” ê°„(1) + ì§€ì§€ ìž¥ê°„(ê°€ì¤‘) í•©ì‚° ë¹„ìœ¨ìž…ë‹ˆë‹¤. ì‹œê°„ ë¯¸ìž…ë ¥ ì‹œ ì‹œì£¼ëŠ” ì œì™¸ë©ë‹ˆë‹¤.<br/>
â€» ìš´ì„¸í’€ì´ëŠ” ì‚¬ì£¼ êµ¬ì¡°ë¥¼ ë°”íƒ•ìœ¼ë¡œ í•œ ì¼ë°˜ì ì¸ í•´ì„ì´ë©°, ê°œì¸ì˜ ë…¸ë ¥ê³¼ ì„ íƒì´ ë”ìš± ì¤‘ìš”í•©ë‹ˆë‹¤.
</div>
</div>
`;

return html;
}

// ===== ë²„íŠ¼ ì´ë²¤íŠ¸ =====
$('#btnToday')?.addEventListener('click', ()=>{
const birthRaw = $('#today-birth').value;
const name = $('#today-name')?.value?.trim() || '';
const calMode = getCalMode('today');
const isLeap = getLeap('today');

try {
if (!birthRaw.trim()) {
alert('ìƒë…„ì›”ì¼ì„ ìž…ë ¥í•˜ì„¸ìš”.');
return;
}

const solar = toSolarFromInput(birthRaw, '', calMode, isLeap);
const birthSolarStr = fmtSolar(solar);
const fortuneData = calcEnhancedDailyFortune(birthSolarStr);
const htmlResult = renderEnhancedDailyFortune(fortuneData, name);

openSheet('ì˜¤ëŠ˜ì˜ ìš´ì„¸', htmlResult, {
type: 'enhanced-today',
birth_input: birthRaw,
name: name,
calMode: calMode,
isLeap: isLeap,
birth_solar: birthSolarStr,
data: fortuneData
});

reactCrystal('ì˜¤ëŠ˜ì˜ ìƒì„¸ ìš´ì„¸ë¥¼ ë¶ˆëŸ¬ì™”ìŠµë‹ˆë‹¤! âœ¨');
} catch (e) {
console.error(e);
alert(e.message || 'ìž…ë ¥ ê°’ì„ í™•ì¸í•´ ì£¼ì„¸ìš”.');
}
});

$('#btnSaju')?.addEventListener('click', () => {
const rawDate = $('#saju-birth')?.value || '';
const rawTime = $('#saju-time')?.value || '';
const gender = $('#saju-gender')?.value || '';
const name = $('#saju-name')?.value?.trim() || '';
const calMode = getCalMode('saju');
const isLeap = getLeap('saju');

try {
if (!rawDate.trim()) { 
alert('ìƒë…„ì›”ì¼ì„ ìž…ë ¥í•˜ì„¸ìš”.'); 
return; 
}

const r = computeBaZi(rawDate, rawTime, calMode, isLeap);
const enhancedResult = buildEnhancedSajuResult(r, name);

openSheet('ì •í†µ ì‚¬ì£¼ í•´ì„', enhancedResult, {
type:'saju', name, date: rawDate, time: rawTime, gender, calMode, isLeap, data: r
});

reactCrystal('ì‚¬ì£¼ í•´ì„ì´ ì™„ë£Œë˜ì—ˆìŠµë‹ˆë‹¤ âœ¨');
} catch (e) {
console.error(e);
alert(e.message || 'ì‚¬ì£¼ ê³„ì‚° ì¤‘ ì˜¤ë¥˜');
}
});

$('#btnMatch')?.addEventListener('click', ()=>{
const a=$('#match-a').value,b=$('#match-b').value;
const {score,text}=calcMatch(a,b);
openSheet('ê¶í•© ê²°ê³¼',score==null?text:`ê¶í•© ì§€ìˆ˜: ${score}/100\n${text}`,{type:'match',a,b,score,text});
reactCrystal('ê¶í•©ì„ ê³„ì‚°í–ˆìŠµë‹ˆë‹¤ âœ¨');
});

$('#btnYear')?.addEventListener('click', ()=>{
const b=$('#year-birth').value;
const {idx,text}=calcYear(b);
openSheet('2025 ì‹ ë…„ ìš´ì„¸',text,{type:'year',birth:b,idx,text});
reactCrystal('ì˜¬í•´ì˜ íë¦„ì„ í™•ì¸í–ˆìŠµë‹ˆë‹¤ âœ¨');
});

// ===== ë§ˆì´íŽ˜ì´ì§€ - ìµœê·¼ ê²°ê³¼ ì‚­ì œ =====
$('#btnClear')?.addEventListener('click', ()=>{
if(confirm('ìµœê·¼ ê²°ê³¼ë¥¼ ëª¨ë‘ ì‚­ì œí•˜ì‹œê² ìŠµë‹ˆê¹Œ?')){
localStorage.removeItem(LS_KEY);
alert('ìµœê·¼ ê²°ê³¼ê°€ ëª¨ë‘ ì‚­ì œë˜ì—ˆìŠµë‹ˆë‹¤.');
}
});

// ===== ì´ˆê¸°í™” & ê²½ëŸ‰ ë¼ìš°í„° =====

// ë’¤ë¡œê°€ê¸°/íƒ­ ì „í™˜ ë•Œ ì—´ë ¤ìžˆë˜ ì˜¤ë²„ë ˆì´ ë‹«ê¸°
document.addEventListener('visibilitychange', ()=>{ if (document.hidden) closeAllOverlays(); });

// 1) data-route í´ë¦­ì„ SPA ë¼ìš°íŒ…ìœ¼ë¡œ ì²˜ë¦¬
document.addEventListener('click', (e) => {
  const el = e.target.closest('[data-route]');
  if (!el) return;

  const route = el.dataset.route;  // e.g. "fortune-today" | "home"
  e.preventDefault();

  if (route && route.startsWith('fortune-')) {
    const view = route.replace('fortune-', ''); // today | saju | tarot | ...
    location.hash = '#/fortune/' + view;
  } else if (route === 'home') {
    location.hash = '#/home';
  }
});

// 2) í•´ì‹œë¥¼ ì½ì–´ íƒ­/ë·° ì „í™˜
function routeFromHash() {
   if (location.hash === '#lotto') {
    setActiveTab('fortune');
    showFortuneView('fortune-lotto');
    return;
  }
  const m = location.hash.match(/^#\/([^/]+)(?:\/([^/]+))?/);
  const tab = m?.[1] || 'home';
  const sub = m?.[2] || '';

  // íƒ­ ë³´ì—¬ì£¼ê¸°
  setActiveTab(['home','fortune','chat','me'].includes(tab) ? tab : 'home');

  // ì„œë¸Œë·° ì„ íƒ
  if (tab === 'fortune') {
    const view =
      sub === 'saju'  ? 'fortune-saju'  :
      sub === 'tarot' ? 'fortune-tarot' :
      sub === 'palm'  ? 'fortune-palm'  :
      sub === 'match' ? 'fortune-match' :
      sub === 'year'  ? 'fortune-year'  :
      sub === 'lotto' ? 'fortune-lotto' :
                        'fortune-today';
    showFortuneView(view);
  }
  closeAllOverlays();
}

// 3) ì§„ìž…/í•´ì‹œë³€ê²½ ì‹œ ì ìš©
window.addEventListener('hashchange', routeFromHash);
window.addEventListener('load', () => {
  bindCalToggle('today');
  bindCalToggle('saju');
  if (!location.hash) location.hash = '#/home';
  routeFromHash();
});

// ===== ì†ê¸ˆë³´ê¸° ë©”ë‰´ "ì¤€ë¹„ì¤‘" ì²˜ë¦¬ =====

// ì†ê¸ˆë³´ê¸° ë©”ë‰´ë¥¼ "ì¤€ë¹„ì¤‘"ìœ¼ë¡œ í‘œì‹œí•˜ê³  ë¹„í™œì„±í™”
function setPalmAsComingSoon() {
  const comingSoonStyle = document.createElement('style');
  comingSoonStyle.id = 'palm-coming-soon';
  comingSoonStyle.textContent = `
    /* ì†ê¸ˆë³´ê¸° ë©”ë‰´ "ì¤€ë¹„ì¤‘" ìŠ¤íƒ€ì¼ */
    .service-item[data-route="fortune-palm"],
    .special-item[data-route="fortune-palm"],
    [data-route="fortune-palm"] {
      opacity: 0.7;
      pointer-events: none;
      position: relative;
      filter: grayscale(30%);
      cursor: not-allowed;
    }
    
    /* "ì¤€ë¹„ì¤‘" ë°°ì§€ í‘œì‹œ */
    .service-item[data-route="fortune-palm"]::after,
    .special-item[data-route="fortune-palm"]::after {
      content: "ðŸš§ ì¤€ë¹„ì¤‘";
      position: absolute;
      top: 12px;
      right: 12px;
      background: linear-gradient(135deg, #ff9800, #f57c00);
      color: white;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: bold;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      z-index: 10;
    }
    
    /* í˜¸ë²„ íš¨ê³¼ ë¹„í™œì„±í™” */
    .service-item[data-route="fortune-palm"]:hover,
    .special-item[data-route="fortune-palm"]:hover {
      transform: none !important;
      box-shadow: none !important;
    }
  `;
  
  if (!document.getElementById('palm-coming-soon')) {
    document.head.appendChild(comingSoonStyle);
  }
}

// ì†ê¸ˆë³´ê¸° í´ë¦­ ì‹œ ì¤€ë¹„ì¤‘ ì•Œë¦¼ í‘œì‹œ
function showPalmComingSoonAlert() {
  // í´ë¦­ ì´ë²¤íŠ¸ ì°¨ë‹¨ ë° ì•Œë¦¼ í‘œì‹œ
  document.addEventListener('click', function(e) {
    const palmElement = e.target.closest('[data-route="fortune-palm"]');
    if (palmElement) {
      e.preventDefault();
      e.stopPropagation();
      
      // ì¤€ë¹„ì¤‘ ì•Œë¦¼ í‘œì‹œ
      showComingSoonNotification();
      return false;
    }
  }, true);
}

// ì¤€ë¹„ì¤‘ ì•Œë¦¼ ë©”ì‹œì§€
function showComingSoonNotification() {
  // ê¸°ì¡´ ì•Œë¦¼ì´ ìžˆìœ¼ë©´ ì œê±°
  const existingNotif = document.querySelector('.coming-soon-notification');
  if (existingNotif) {
    existingNotif.remove();
  }
  
  const notification = document.createElement('div');
  notification.className = 'coming-soon-notification';
  notification.style.cssText = `
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    padding: 20px 30px;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    z-index: 9999;
    text-align: center;
    font-size: 16px;
    font-weight: bold;
    backdrop-filter: blur(10px);
    animation: comingSoonPop 0.3s ease-out;
  `;
  
  notification.innerHTML = `
    <div style="font-size: 48px; margin-bottom: 10px;">âœ‹</div>
    <div style="margin-bottom: 8px;">ì†ê¸ˆë³´ê¸° ì„œë¹„ìŠ¤</div>
    <div style="font-size: 14px; opacity: 0.9; font-weight: normal;">ê³§ ë§Œë‚˜ë³´ì‹¤ ìˆ˜ ìžˆìŠµë‹ˆë‹¤! ðŸ”®</div>
  `;
  
  // ì• ë‹ˆë©”ì´ì…˜ CSS ì¶”ê°€
  if (!document.getElementById('coming-soon-animation')) {
    const animationStyle = document.createElement('style');
    animationStyle.id = 'coming-soon-animation';
    animationStyle.textContent = `
      @keyframes comingSoonPop {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
        100% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
      }
    `;
    document.head.appendChild(animationStyle);
  }
  
  document.body.appendChild(notification);
  
  // 2.5ì´ˆ í›„ ìžë™ ì œê±°
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translate(-50%, -50%) scale(0.9)';
    notification.style.transition = 'all 0.3s ease-out';
    setTimeout(() => notification.remove(), 300);
  }, 2500);
}

// DOMì´ ë¡œë“œë˜ë©´ ì†ê¸ˆ ë©”ë‰´ë¥¼ "ì¤€ë¹„ì¤‘"ìœ¼ë¡œ ì„¤ì •
document.addEventListener('DOMContentLoaded', function() {
  setPalmAsComingSoon();
  showPalmComingSoonAlert();
  
  // ì†ê¸ˆ ê´€ë ¨ ì œëª©ì— (ì˜ˆì •) ì¶”ê°€
  setTimeout(() => {
    const palmTitles = document.querySelectorAll('[data-route="fortune-palm"] h3, [data-route="fortune-palm"] .title');
    palmTitles.forEach(title => {
      if (title && !title.textContent.includes('(ì˜ˆì •)')) {
        title.textContent = title.textContent.replace('ì†ê¸ˆ ë³´ê¸°', 'ì†ê¸ˆ ë³´ê¸° (ì˜ˆì •)');
      }
    });
  }, 100);
});

// ìš´ì„¸ ìŠ¤íƒ€ì¼ ì¶”ê°€
(function addEnhancedFortuneStyles(){
if (document.getElementById('enhanced-fortune-styles')) return;

const styles = `
.fortune-date {
  text-align: center;
  color: #667eea;
  font-weight: bold;
  margin-bottom: 20px;
  font-size: 16px;
}

.fortune-card {
  margin: 15px 0;
  border-left: 5px solid;
}

.fortune-card:nth-child(1) { border-left-color: #ff6b35; }
.fortune-card:nth-child(2) { border-left-color: #f7931e; }
.fortune-card:nth-child(3) { border-left-color: #ffd700; }
.fortune-card:nth-child(4) { border-left-color: #32cd32; }
.fortune-card:nth-child(5) { border-left-color: #4169e1; }
.fortune-card:nth-child(6) { border-left-color: #9370db; }

.card-header {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
}

.card-score {
  margin-left: auto;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  padding: 4px 12px;
  border-radius: 20px;
  font-weight: bold;
  font-size: 14px;
}

.lucky-items-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
  margin: 20px 0;
}

.lucky-item-card {
  background: linear-gradient(135deg, #f8f9ff, #e8f4ff);
  border: 2px solid #e0e7ff;
  border-radius: 15px;
  padding: 20px;
  text-align: center;
  transition: transform 0.2s ease;
}

.lucky-item-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
}

.lucky-icon {
  font-size: 24px;
  margin-bottom: 8px;
}

.lucky-label {
  font-size: 12px;
  color: #666;
  margin-bottom: 5px;
}

.lucky-value {
  font-weight: bold;
  color: #333;
  font-size: 16px;
}
`;

const styleTag = document.createElement('style');
styleTag.id = 'enhanced-fortune-styles';
styleTag.textContent = styles;
document.head.appendChild(styleTag);
})();

// íŽ˜ì´ì§€ ë¡œë“œ í›„ì—ë„ ìž¬í™•ì¸
window.addEventListener('load', function () {
  setPalmAsComingSoon();

  // ë™ì ìœ¼ë¡œ ì¶”ê°€ë˜ëŠ” ì†ê¸ˆ ìš”ì†Œë“¤ë„ "ì¤€ë¹„ì¤‘" ì²˜ë¦¬
  const observer = new MutationObserver(function (mutations) {
    mutations.forEach(function (mutation) {
      mutation.addedNodes.forEach(function (node) {
        if (node.nodeType !== 1) return; // Element ë…¸ë“œë§Œ

        // ìžì‹ ì´ ì†ê¸ˆ ìš”ì†Œì¸ ê²½ìš°
        if (node.matches && node.matches('[data-route="fortune-palm"]')) {
          setPalmAsComingSoon();
        }

        // ìžì‹ ì¤‘ì— ì†ê¸ˆ ìš”ì†Œê°€ ì¶”ê°€ëœ ê²½ìš°
        const palmElements =
          node.querySelectorAll && node.querySelectorAll('[data-route="fortune-palm"]');
        if (palmElements && palmElements.length) {
          setPalmAsComingSoon();
        }
      });
    });
  });

  observer.observe(document.body, { childList: true, subtree: true });
});

// ===== MysticTell: Policy modal controls (scoped) =====
(function(){
  const $ = (s,r=document)=>r.querySelector(s);
  const $$ = (s,r=document)=>Array.from(r.querySelectorAll(s));

  const open = (which)=>{
    const el = $(`#${which}`);
    if(!el) return;
    el.classList.add('mt-show');
  };
  const closeAll = ()=>{
    $$('.mt-sheet-backdrop').forEach(el=>{
      el.classList.remove('mt-show');
    });
  };

  // open triggers
  $('#mt-link-privacy')?.addEventListener('click', (e)=>{ e.preventDefault(); open('mt-privacy'); });
  $('#mt-link-terms')?.addEventListener('click', (e)=>{ e.preventDefault(); open('mt-terms'); });

  // close triggers (X ë²„íŠ¼, ë°°ê²½ í´ë¦­)
  $$('.mt-sheet-close').forEach(btn=>{
    btn.addEventListener('click', closeAll);
  });
  $$('.mt-sheet-backdrop').forEach(bg=>{
    bg.addEventListener('click', (e)=>{
      if(e.target === bg) closeAll();
    });
  });

  // Esc ë‹«ê¸°
  document.addEventListener('keydown', (e)=>{
    if(e.key === 'Escape') closeAll();
  });
})();
(function () {
  const splash = document.getElementById('splashScreen');
  if (!splash) return;

  // ë²„íŠ¼ idê°€ ë‹¤ë¥´ë©´ ì•„ëž˜ ì…€ë ‰í„°ë¥¼ ë°”ê¿”ì£¼ì„¸ìš”.
  const startBtn = document.getElementById('startBtn') 
                || splash.querySelector('.start-image-btn');

  const hideSplash = () => splash.classList.add('hidden');

  // â‘  íŽ˜ì´ì§€ ë¡œë“œ í›„ ìžë™ ë‹«ê¸° (ì›í•˜ë©´ ì‹œê°„ ì¡°ì ˆ)
  window.addEventListener('load', () => {
    setTimeout(hideSplash, 800); // 0.8ì´ˆ ë’¤ ìžë™ ë‹«ê¸°
  });

  // â‘¡ Start ë²„íŠ¼ í´ë¦­ìœ¼ë¡œ ë‹«ê¸°(ë‘˜ ë‹¤ ìœ ì§€í•´ë„ ë¨)
  startBtn?.addEventListener('click', (e) => {
    e.preventDefault();
    hideSplash();
  });
})();

// ðŸš¨ GitHub Pages ì „ìš© ìˆ˜ì • ì½”ë“œ
// ê¸°ì¡´ ìŠ¤í”Œëž˜ì‹œ ì½”ë“œë¥¼ ì°¾ì•„ì„œ ì´ê²ƒìœ¼ë¡œ êµì²´í•˜ì„¸ìš”

(function fixGitHubSplash() {
  console.log('ðŸ”§ GitHub Pages ìŠ¤í”Œëž˜ì‹œ ìˆ˜ì • ì‹œìž‘');
  
  let splashFixed = false;
  
  const forceSplashHide = () => {
    if (splashFixed) return;
    splashFixed = true;
    
    console.log('ðŸ’« ìŠ¤í”Œëž˜ì‹œ ê°•ì œ ìˆ¨ê¹€ ì‹¤í–‰');
    
    const splash = document.getElementById('splashScreen');
    if (splash) {
      splash.style.opacity = '0';
      splash.style.pointerEvents = 'none';
      splash.classList.add('hidden');
      
      setTimeout(() => {
        splash.style.display = 'none';
        console.log('âœ… ìŠ¤í”Œëž˜ì‹œ ì™„ì „ ì œê±°ë¨');
      }, 500);
    }
    
    // ë©”ì¸ ì½˜í…ì¸  ê°•ì œ í‘œì‹œ
    const mainContent = document.getElementById('mainContent');
    const bottomNav = document.getElementById('bottomNav');
    
    if (mainContent) {
      mainContent.style.display = 'block';
      mainContent.classList.add('show');
      console.log('âœ… ë©”ì¸ ì½˜í…ì¸  í‘œì‹œë¨');
    }
    
    if (bottomNav) {
      bottomNav.style.display = 'flex';
      bottomNav.classList.add('show');
      console.log('âœ… í•˜ë‹¨ ë„¤ë¹„ í‘œì‹œë¨');
    }
  };
  
  // ðŸŽ¯ ë‹¤ì¤‘ íŠ¸ë¦¬ê±°ë¡œ ìŠ¤í”Œëž˜ì‹œ ì œê±° (GitHub Pages ëŒ€ì‘)
  
  // 1) ì¦‰ì‹œ ì‹¤í–‰ (DOM ì¤€ë¹„ë˜ë©´)
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(forceSplashHide, 100);
    });
  } else {
    setTimeout(forceSplashHide, 100);
  }
  
  // 2) íŽ˜ì´ì§€ ë¡œë“œ ì™„ë£Œì‹œ
  window.addEventListener('load', () => {
    setTimeout(forceSplashHide, 200);
  });
  
  // 3) ê°•ì œ íƒ€ì´ë¨¸ (ìµœí›„ì˜ ìˆ˜ë‹¨)
  setTimeout(forceSplashHide, 1000);
  
  // 4) í´ë¦­ ì´ë²¤íŠ¸ë¡œë„ ì œê±°
  document.addEventListener('click', (e) => {
    if (e.target.closest('#startBtn, .start-btn, .start-image-btn, #splashScreen')) {
      e.preventDefault();
      forceSplashHide();
    }
  });
  
  // 5) í‚¤ë³´ë“œ ì´ë²¤íŠ¸ë¡œë„ ì œê±° (Enter, Space, Escape)
  document.addEventListener('keydown', (e) => {
    if (['Enter', 'Space', 'Escape'].includes(e.code)) {
      forceSplashHide();
    }
  });
  
  console.log('ðŸŽ¯ GitHub Pages ìŠ¤í”Œëž˜ì‹œ ìˆ˜ì • ì™„ë£Œ');
})();

// ðŸ”§ ì¶”ê°€: GitHub Pages ë¼ìš°íŒ… ì•ˆì •í™”
(function fixGitHubRouting() {
  // URL í•´ì‹œ ì •ë¦¬
  if (!location.hash || location.hash === '#') {
    location.hash = '#/home';
  }
  
  // ê°•ì œ í™ˆíŽ˜ì´ì§€ ì´ë™ (ì‘ê¸‰ìš©)
  const forceHome = () => {
    setActiveTab('home');
    const homeTab = document.querySelector('.nav-item[data-tab="home"]');
    if (homeTab) homeTab.classList.add('active');
  };
  
  // 3ì´ˆ í›„ì—ë„ ì•„ë¬´ê²ƒë„ ì•ˆ ë³´ì´ë©´ ê°•ì œ í™ˆìœ¼ë¡œ
  setTimeout(() => {
    const mainContent = document.getElementById('mainContent');
    if (mainContent && mainContent.style.display === 'none') {
      console.log('ðŸš¨ ê¸´ê¸‰ ë³µêµ¬: ê°•ì œ í™ˆ ì´ë™');
      forceHome();
    }
  }, 3000);
})();

// ðŸ› ï¸ GitHub Pages ë””ë²„ê¹… í—¬í¼
console.log('ðŸ“ í˜„ìž¬ í™˜ê²½:', {
  host: location.host,
  pathname: location.pathname,
  hash: location.hash,
  readyState: document.readyState
});

function showCard(which) {
  const today = document.getElementById('view-today');
  const saju  = document.getElementById('view-saju');
  if (!today || !saju) return;

  if (which === 'today') {
    today.style.display = 'block';
    saju.style.display  = 'none';
  } else {
    saju.style.display  = 'block';
    today.style.display = 'none';
  }
}

// ì˜¤ëŠ˜ì˜ ìš´ì„¸ë¡œ ì´ë™í•˜ëŠ” ëª¨ë“  íŠ¸ë¦¬ê±°
[
  'a[href="#today"]',   // ìƒë‹¨ ë„¤ë¹„
  '#ctaToday',          // ížˆì–´ë¡œ ì™¼ìª½ ë²„íŠ¼(ìžˆë‹¤ë©´)
  '#ctaStart'           // ì˜¤ë¥¸ìª½ ì¹´ë“œ "ë°”ë¡œ ì‹œìž‘"(ìžˆë‹¤ë©´)
].forEach(sel => {
  document.querySelectorAll(sel).forEach(el => {
    el.addEventListener('click', (e) => {
      e.preventDefault();
      showCard('today');
      smoothScrollTo('#today');
    });
  });
});

// ì •í†µ ì‚¬ì£¼ë¡œ ì´ë™í•˜ëŠ” íŠ¸ë¦¬ê±°
[
  'a[href="#saju"]',    // ìƒë‹¨ ë„¤ë¹„
  '#ctaSaju'            // ížˆì–´ë¡œ ì™¼ìª½ ë²„íŠ¼(ìžˆë‹¤ë©´)
].forEach(sel => {
  document.querySelectorAll(sel).forEach(el => {
    el.addEventListener('click', (e) => {
      e.preventDefault();
      showCard('saju');
      smoothScrollTo('#saju');
    });
  });
});

// ===== í†µí•© ë¼ìš°íŒ… ë° ë²„íŠ¼ ì´ë²¤íŠ¸ ì‹œìŠ¤í…œ =====
(function() {
  const hideSplash = () => {
    const splash = document.getElementById('splashScreen');
    if (splash) splash.classList.add('hidden');
  };

  // í†µí•© ë¼ìš°íŒ… ì²˜ë¦¬
  function handleRoute() {
    const hash = location.hash || '#/home';
    const match = hash.match(/^#\/([^/]+)(?:\/([^/]+))?/);
    const tab = match?.[1] || 'home';
    const sub = match?.[2] || '';

    setActiveTab(tab);
    
    if (tab === 'fortune') {
      const viewMap = {
        'today': 'fortune-today',
        'saju': 'fortune-saju', 
        'tarot': 'fortune-tarot',
        'palm': 'fortune-palm',
        'match': 'fortune-match',
        'year': 'fortune-year',
        'lotto': 'fortune-lotto'
      };
      showFortuneView(viewMap[sub] || 'fortune-today');
    }
  }

  // ===================== ë¼ìš°íŒ… í›… (ìµœì¢…ë³¸) =====================

// 1) ì „ì—­ í´ë¦­ ìœ„ìž„: data-route, CTA, ìŠ¤í”Œëž˜ì‹œ Start ëª¨ë‘ ì²˜ë¦¬
document.addEventListener('click', (e) => {
  // data-route ë˜ëŠ” CTA/Start ë²„íŠ¼ë“¤ì„ í•œ ë²ˆì— ìºì¹˜
  const el = e.target.closest('[data-route], #ctaToday, #ctaSaju, #ctaStart, #ctaLotto, .start-btn');
  if (!el) return;

  e.preventDefault();
  try { hideSplash?.(); } catch (_) {}

  // data-routeê°€ ìžˆìœ¼ë©´ ê·¸ ê°’ì„ ìš°ì„  ì‚¬ìš©
  const r = el.dataset?.route;
  if (r) {
    location.hash = r.startsWith('fortune-')
      ? '#/fortune/' + r.replace('fortune-', '')
      : '#/' + r;
    return;
  }

  // data-route ì—†ëŠ” CTA ëŒ€ë¹„ (êµ¬í˜• ë§ˆí¬ì—… í˜¸í™˜)
  if (el.id === 'ctaSaju') {
    location.hash = '#/fortune/saju';
  } else {
    // ê¸°ë³¸ì€ ì˜¤ëŠ˜ì˜ ìš´ì„¸ë¡œ
    location.hash = '#/fortune/today';
  }
});

// 2) í•´ì‹œ ë³€ê²½ ì‹œ ë¼ìš°íŒ…
window.addEventListener('hashchange', handleRoute);

// 3) ìµœì´ˆ ì§„ìž… ì‹œ ë¼ìš°íŒ…
window.addEventListener('load', () => {
  try { hideSplash?.(); } catch (_) {}
  if (!location.hash) location.hash = '#/home';
  handleRoute();
});

function smoothScrollTo(selector) {
const element = document.querySelector(selector);
if (element) {
element.scrollIntoView({ behavior: 'smooth', block: 'start' });
}
}

// ðŸ”¥ ê°•ë ¥í•œ ë°‘ì¤„ ì™„ì „ ì œê±° (ì˜êµ¬ì ìš©)
function removeAllUnderlines() {
  document.querySelectorAll('*').forEach(el => {
    el.style.setProperty('text-decoration', 'none', 'important');
    el.style.setProperty('text-decoration-line', 'none', 'important');
    el.style.setProperty('border-bottom', 'none', 'important');
  });
}

// DOM ë¡œë“œ í›„ ì‹¤í–‰
document.addEventListener('DOMContentLoaded', removeAllUnderlines);

// íŽ˜ì´ì§€ ë¡œë“œ ì™„ë£Œ í›„ì—ë„ ì‹¤í–‰ (í˜¹ì‹œ ëª¨ë¥´ë‹ˆê¹Œ)
window.addEventListener('load', removeAllUnderlines);

// ë™ì ìœ¼ë¡œ ì¶”ê°€ë˜ëŠ” ìš”ì†Œì—ë„ ì ìš©
const observer = new MutationObserver(removeAllUnderlines);
observer.observe(document.body, {
  childList: true,
  subtree: true
});
                          
// ðŸŽ² ë¡œë˜ ë²ˆí˜¸ ìƒì„±ê¸°
const LOTTO_STATS = {
  hot: [40, 22, 34, 17, 10, 37, 27, 43, 33, 39, 12, 23],
  lucky: [7, 14, 21, 28, 35, 42]
};

function generateLotto(birthdate = '') {
  const today = new Date().toDateString();
  const seed = (birthdate || 'random') + today;
  let hash = 0;
  
  for(let i = 0; i < seed.length; i++) {
    hash = (hash * 31 + seed.charCodeAt(i)) % 100000;
  }
  
  const numbers = [];
  const hotNums = [...LOTTO_STATS.hot];
  
  // í†µê³„ ê¸°ë°˜ 4ê°œ
  for(let i = 0; i < 4; i++) {
    const idx = Math.abs(hash + i) % hotNums.length;
    numbers.push(hotNums.splice(idx, 1)[0]);
  }
  
  // ê°œì¸í™” ëžœë¤ 2ê°œ
  while(numbers.length < 6) {
    const num = (Math.abs(hash + numbers.length * 7) % 45) + 1;
    if(!numbers.includes(num)) numbers.push(num);
  }
  
  const bonus = (Math.abs(hash + 99) % 45) + 1;
  return { numbers: numbers.sort((a,b) => a-b), bonus };
}

// ë¡œë˜ ë²„íŠ¼ ì´ë²¤íŠ¸
$('#btnLotto')?.addEventListener('click', ()=>{
  const birth = $('#lotto-birth')?.value || '';
  const result = generateLotto(birth);
  const html = `
    ðŸŽ² í–‰ìš´ì˜ ë¡œë˜ë²ˆí˜¸
    
    ${result.numbers.map(n => `[${String(n).padStart(2,'0')}]`).join(' ')}
    ë³´ë„ˆìŠ¤: [${String(result.bonus).padStart(2,'0')}]
    
    ${birth ? 'ðŸ”® ê°œì¸ë§žì¶¤' : 'ðŸŽ² ëžœë¤'} ìƒì„±
    ðŸ“Š í†µê³„ ê¸°ë°˜ + í–‰ìš´ ì¡°í•©
  `;
  openSheet('ðŸ€ í–‰ìš´ì˜ ë¡œë˜ë²ˆí˜¸', html, {type:'lotto', numbers:result.numbers, bonus:result.bonus});
  reactCrystal('í–‰ìš´ì˜ ë²ˆí˜¸ë¥¼ ìƒì„±í–ˆìŠµë‹ˆë‹¤! ðŸ€');
});

// ðŸŽ² ë¡œë˜ íŽ˜ì´ì§€ ê°•ì œ í‘œì‹œ (ìž„ì‹œ í•´ê²°)
document.addEventListener('DOMContentLoaded', function() {
  if (location.hash.includes('lotto')) {
    setTimeout(() => {
      const lottoView = document.querySelector('#view-lotto');
      if (lottoView) {
        lottoView.style.background = 'white';
        lottoView.style.padding = '20px';
        lottoView.style.border = '1px solid #ddd';
        lottoView.style.borderRadius = '10px';
        lottoView.style.margin = '20px auto';
        lottoView.style.maxWidth = '500px';
      }
    }, 500);
  }
});

(() => {
  // 0) ê¸°ë³¸ ìŠ¤íƒ€ì¼(ë°‘ì¤„ ì œê±°)
  const st = document.createElement('style');
  st.textContent = `
    a.btn, .btn, .mt-nav a { text-decoration: none !important; }
  `;
  document.head.appendChild(st);

  // 1) ìŠ¤í”Œëž˜ì‹œ ë„ê³  ë©”ì¸ í‘œì‹œ
  const splash = document.getElementById('splashScreen');
  if (splash) splash.style.display = 'none';
  const main = document.getElementById('mainContent');
  if (main) { main.style.display = 'block'; main.classList.add('show'); }

  // 2) í—¬í¼
  const $ = (s, r = document) => r.querySelector(s);
  const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));

  // 3) ìž˜ëª»ëœ ë§í¬ ë³´ì •(í˜¹ì‹œ #/lotto ë¡œ ë˜ì–´ìžˆìœ¼ë©´ êµì •)
  document.querySelectorAll('a[href="#/lotto"], a[href="#lotto"]').forEach(a => {
    a.setAttribute('href', '#/fortune/lotto');
  });

  // 4) íŽ˜ì´ì§€ íƒ­ ì „í™˜
  const pages = {
    home:   $('#page-home'),
    fortune:$('#page-fortune'),
    chat:   $('#page-chat'),
    me:     $('#page-me')
  };

  function setActiveTab(tab) {
    Object.entries(pages).forEach(([k, el]) => {
      if (!el) return;
      if (k === tab) { el.style.display = 'block'; el.classList.add('show'); }
      else { el.style.display = 'none'; el.classList.remove('show'); }
    });
    // ìƒë‹¨ ë„¤ë¹„ í™œì„±í™” í‘œì‹œ(ìžˆìœ¼ë©´)
    $$('.mt-nav a,[data-tab]').forEach(a => {
      const t = a.dataset.tab || ((a.getAttribute('href')||'').match(/^#\/([^/]+)/)?.[1] ?? '');
      a.classList.toggle('active', t === tab);
    });
  }

  // 5) ìš´ì„¸ ì„œë¸Œë·° ì „í™˜
  const titleEl = $('#fortuneTitle');
  const views = {
    'fortune-today': $('#view-today'),
    'fortune-saju' : $('#view-saju'),
    'fortune-tarot': $('#view-tarot'),
    'fortune-palm' : $('#view-palm'),
    'fortune-match': $('#view-match'),
    'fortune-year' : $('#view-year'),
    'fortune-lotto': $('#view-lotto')
  };
  const viewTitle = {
    'fortune-today':'ì˜¤ëŠ˜ì˜ ìš´ì„¸',
    'fortune-saju':'ì •í†µ ì‚¬ì£¼',
    'fortune-tarot':'íƒ€ë¡œ ì ',
    'fortune-palm':'ì†ê¸ˆ ë³´ê¸°',
    'fortune-match':'ê¶í•© ë³´ê¸°',
    'fortune-year':'ì‹ ë…„ ìš´ì„¸ (2025)',
    'fortune-lotto':'í–‰ìš´ë²ˆí˜¸'
  };

  function showFortuneView(key) {
    Object.values(views).forEach(v => v && (v.style.display = 'none'));
    const el = views[key] || views['fortune-today'];
    if (el) el.style.display = 'block';
    if (titleEl) titleEl.textContent = viewTitle[key] || viewTitle['fortune-today'];
  }

  // 6) ë¼ìš°í„°
  function routeFromHash() {
    const m = location.hash.match(/^#\/([^/]+)(?:\/([^/]+))?/);
    const tab = m?.[1] || 'home';
    const sub = m?.[2] || '';
    setActiveTab(['home','fortune','chat','me'].includes(tab) ? tab : 'home');
    if (tab === 'fortune') {
      const map = {
        today:'fortune-today', saju:'fortune-saju', tarot:'fortune-tarot',
        palm:'fortune-palm', match:'fortune-match', year:'fortune-year', lotto:'fortune-lotto'
      };
      showFortuneView(map[sub] || 'fortune-today');
    }
  }

  // 7) data-route ì „ì—­ í´ë¦­ í•¸ë“¤ëŸ¬(ë„¤ë¹„/ë²„íŠ¼ ê³µí†µ)
  document.addEventListener('click', e => {
    const el = e.target.closest('[data-route]');
    if (!el) return;
    const r = el.dataset.route;
    if (!r) return;
    e.preventDefault();
    location.hash = r.startsWith('fortune-')
      ? '#/fortune/' + r.replace('fortune-', '')
      : '#/' + r;
  }, true);

  // 8) ì‹œìž‘
  window.addEventListener('hashchange', routeFromHash);
  if (!location.hash) location.hash = '#/home';
  routeFromHash();
})();
